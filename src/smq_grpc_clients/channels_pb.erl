%% -*- coding: utf-8 -*-
%% % this file is @generated
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.21.1
%% Version source: file
-module(channels_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).


%% enumerated types

-export_type([]).

%% message types
-type remove_client_connections_req() ::
      #{client_id               => unicode:chardata() % = 1, optional
       }.

-type remove_client_connections_res() ::
      #{
       }.

-type unset_parent_group_from_channels_req() ::
      #{parent_group_id         => unicode:chardata() % = 1, optional
       }.

-type unset_parent_group_from_channels_res() ::
      #{
       }.

-type authz_req() ::
      #{domain_id               => unicode:chardata(), % = 1, optional
        client_id               => unicode:chardata(), % = 2, optional
        client_type             => unicode:chardata(), % = 3, optional
        channel_id              => unicode:chardata(), % = 4, optional
        type                    => non_neg_integer() % = 5, optional, 32 bits
       }.

-type authz_res() ::
      #{authorized              => boolean() | 0 | 1 % = 1, optional
       }.

-type retrieve_entities_req() ::
      #{ids                     => [unicode:chardata()] % = 1, repeated
       }.

-type retrieve_entities_res() ::
      #{total                   => non_neg_integer(), % = 1, optional, 64 bits
        limit                   => non_neg_integer(), % = 2, optional, 64 bits
        offset                  => non_neg_integer(), % = 3, optional, 64 bits
        entities                => [entity_basic()] % = 4, repeated
       }.

-type retrieve_entity_req() ::
      #{id                      => unicode:chardata() % = 1, optional
       }.

-type retrieve_entity_res() ::
      #{entity                  => entity_basic()   % = 1, optional
       }.

-type entity_basic() ::
      #{id                      => unicode:chardata(), % = 1, optional
        domain_id               => unicode:chardata(), % = 2, optional
        parent_group_id         => unicode:chardata(), % = 3, optional
        status                  => non_neg_integer() % = 4, optional, 32 bits
       }.

-type add_connections_req() ::
      #{connections             => [connection()]   % = 1, repeated
       }.

-type add_connections_res() ::
      #{ok                      => boolean() | 0 | 1 % = 1, optional
       }.

-type remove_connections_req() ::
      #{connections             => [connection()]   % = 1, repeated
       }.

-type remove_connections_res() ::
      #{ok                      => boolean() | 0 | 1 % = 1, optional
       }.

-type connection() ::
      #{client_id               => unicode:chardata(), % = 1, optional
        channel_id              => unicode:chardata(), % = 2, optional
        domain_id               => unicode:chardata(), % = 3, optional
        type                    => non_neg_integer() % = 4, optional, 32 bits
       }.

-type retrieve_id_by_route_req() ::
      #{route                   => unicode:chardata(), % = 1, optional
        domain_id               => unicode:chardata() % = 2, optional
       }.

-export_type(['remove_client_connections_req'/0, 'remove_client_connections_res'/0, 'unset_parent_group_from_channels_req'/0, 'unset_parent_group_from_channels_res'/0, 'authz_req'/0, 'authz_res'/0, 'retrieve_entities_req'/0, 'retrieve_entities_res'/0, 'retrieve_entity_req'/0, 'retrieve_entity_res'/0, 'entity_basic'/0, 'add_connections_req'/0, 'add_connections_res'/0, 'remove_connections_req'/0, 'remove_connections_res'/0, 'connection'/0, 'retrieve_id_by_route_req'/0]).
-type '$msg_name'() :: remove_client_connections_req | remove_client_connections_res | unset_parent_group_from_channels_req | unset_parent_group_from_channels_res | authz_req | authz_res | retrieve_entities_req | retrieve_entities_res | retrieve_entity_req | retrieve_entity_res | entity_basic | add_connections_req | add_connections_res | remove_connections_req | remove_connections_res | connection | retrieve_id_by_route_req.
-type '$msg'() :: remove_client_connections_req() | remove_client_connections_res() | unset_parent_group_from_channels_req() | unset_parent_group_from_channels_res() | authz_req() | authz_res() | retrieve_entities_req() | retrieve_entities_res() | retrieve_entity_req() | retrieve_entity_res() | entity_basic() | add_connections_req() | add_connections_res() | remove_connections_req() | remove_connections_res() | connection() | retrieve_id_by_route_req().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        remove_client_connections_req -> encode_msg_remove_client_connections_req(id(Msg, TrUserData), TrUserData);
        remove_client_connections_res -> encode_msg_remove_client_connections_res(id(Msg, TrUserData), TrUserData);
        unset_parent_group_from_channels_req -> encode_msg_unset_parent_group_from_channels_req(id(Msg, TrUserData), TrUserData);
        unset_parent_group_from_channels_res -> encode_msg_unset_parent_group_from_channels_res(id(Msg, TrUserData), TrUserData);
        authz_req -> encode_msg_authz_req(id(Msg, TrUserData), TrUserData);
        authz_res -> encode_msg_authz_res(id(Msg, TrUserData), TrUserData);
        retrieve_entities_req -> encode_msg_retrieve_entities_req(id(Msg, TrUserData), TrUserData);
        retrieve_entities_res -> encode_msg_retrieve_entities_res(id(Msg, TrUserData), TrUserData);
        retrieve_entity_req -> encode_msg_retrieve_entity_req(id(Msg, TrUserData), TrUserData);
        retrieve_entity_res -> encode_msg_retrieve_entity_res(id(Msg, TrUserData), TrUserData);
        entity_basic -> encode_msg_entity_basic(id(Msg, TrUserData), TrUserData);
        add_connections_req -> encode_msg_add_connections_req(id(Msg, TrUserData), TrUserData);
        add_connections_res -> encode_msg_add_connections_res(id(Msg, TrUserData), TrUserData);
        remove_connections_req -> encode_msg_remove_connections_req(id(Msg, TrUserData), TrUserData);
        remove_connections_res -> encode_msg_remove_connections_res(id(Msg, TrUserData), TrUserData);
        connection -> encode_msg_connection(id(Msg, TrUserData), TrUserData);
        retrieve_id_by_route_req -> encode_msg_retrieve_id_by_route_req(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_remove_client_connections_req(Msg, TrUserData) -> encode_msg_remove_client_connections_req(Msg, <<>>, TrUserData).


encode_msg_remove_client_connections_req(#{} = M, Bin, TrUserData) ->
    case M of
        #{client_id := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_remove_client_connections_res(_Msg, _TrUserData) -> <<>>.

encode_msg_unset_parent_group_from_channels_req(Msg, TrUserData) -> encode_msg_unset_parent_group_from_channels_req(Msg, <<>>, TrUserData).


encode_msg_unset_parent_group_from_channels_req(#{} = M, Bin, TrUserData) ->
    case M of
        #{parent_group_id := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_unset_parent_group_from_channels_res(_Msg, _TrUserData) -> <<>>.

encode_msg_authz_req(Msg, TrUserData) -> encode_msg_authz_req(Msg, <<>>, TrUserData).


encode_msg_authz_req(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{domain_id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{client_id := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{client_type := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{channel_id := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case is_empty_string(TrF4) of
                         true -> B3;
                         false -> e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    case M of
        #{type := F5} ->
            begin
                TrF5 = id(F5, TrUserData),
                if TrF5 =:= 0 -> B4;
                   true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                end
            end;
        _ -> B4
    end.

encode_msg_authz_res(Msg, TrUserData) -> encode_msg_authz_res(Msg, <<>>, TrUserData).


encode_msg_authz_res(#{} = M, Bin, TrUserData) ->
    case M of
        #{authorized := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= false -> Bin;
                   true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_retrieve_entities_req(Msg, TrUserData) -> encode_msg_retrieve_entities_req(Msg, <<>>, TrUserData).


encode_msg_retrieve_entities_req(#{} = M, Bin, TrUserData) ->
    case M of
        #{ids := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_retrieve_entities_req_ids(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_retrieve_entities_res(Msg, TrUserData) -> encode_msg_retrieve_entities_res(Msg, <<>>, TrUserData).


encode_msg_retrieve_entities_res(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{total := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{limit := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{offset := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{entities := F4} ->
            TrF4 = id(F4, TrUserData),
            if TrF4 == [] -> B3;
               true -> e_field_retrieve_entities_res_entities(TrF4, B3, TrUserData)
            end;
        _ -> B3
    end.

encode_msg_retrieve_entity_req(Msg, TrUserData) -> encode_msg_retrieve_entity_req(Msg, <<>>, TrUserData).


encode_msg_retrieve_entity_req(#{} = M, Bin, TrUserData) ->
    case M of
        #{id := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_retrieve_entity_res(Msg, TrUserData) -> encode_msg_retrieve_entity_res(Msg, <<>>, TrUserData).


encode_msg_retrieve_entity_res(#{} = M, Bin, TrUserData) ->
    case M of
        #{entity := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= undefined -> Bin;
                   true -> e_mfield_retrieve_entity_res_entity(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_entity_basic(Msg, TrUserData) -> encode_msg_entity_basic(Msg, <<>>, TrUserData).


encode_msg_entity_basic(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{domain_id := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{parent_group_id := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{status := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                if TrF4 =:= 0 -> B3;
                   true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_add_connections_req(Msg, TrUserData) -> encode_msg_add_connections_req(Msg, <<>>, TrUserData).


encode_msg_add_connections_req(#{} = M, Bin, TrUserData) ->
    case M of
        #{connections := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_add_connections_req_connections(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_add_connections_res(Msg, TrUserData) -> encode_msg_add_connections_res(Msg, <<>>, TrUserData).


encode_msg_add_connections_res(#{} = M, Bin, TrUserData) ->
    case M of
        #{ok := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= false -> Bin;
                   true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_remove_connections_req(Msg, TrUserData) -> encode_msg_remove_connections_req(Msg, <<>>, TrUserData).


encode_msg_remove_connections_req(#{} = M, Bin, TrUserData) ->
    case M of
        #{connections := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_remove_connections_req_connections(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_remove_connections_res(Msg, TrUserData) -> encode_msg_remove_connections_res(Msg, <<>>, TrUserData).


encode_msg_remove_connections_res(#{} = M, Bin, TrUserData) ->
    case M of
        #{ok := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= false -> Bin;
                   true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_connection(Msg, TrUserData) -> encode_msg_connection(Msg, <<>>, TrUserData).


encode_msg_connection(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{client_id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{channel_id := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{domain_id := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{type := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                if TrF4 =:= 0 -> B3;
                   true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_retrieve_id_by_route_req(Msg, TrUserData) -> encode_msg_retrieve_id_by_route_req(Msg, <<>>, TrUserData).


encode_msg_retrieve_id_by_route_req(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{route := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{domain_id := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

e_field_retrieve_entities_req_ids([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_retrieve_entities_req_ids(Rest, Bin3, TrUserData);
e_field_retrieve_entities_req_ids([], Bin, _TrUserData) -> Bin.

e_mfield_retrieve_entities_res_entities(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_entity_basic(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_retrieve_entities_res_entities([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_retrieve_entities_res_entities(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_retrieve_entities_res_entities(Rest, Bin3, TrUserData);
e_field_retrieve_entities_res_entities([], Bin, _TrUserData) -> Bin.

e_mfield_retrieve_entity_res_entity(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_entity_basic(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_add_connections_req_connections(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_connection(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_add_connections_req_connections([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_add_connections_req_connections(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_add_connections_req_connections(Rest, Bin3, TrUserData);
e_field_add_connections_req_connections([], Bin, _TrUserData) -> Bin.

e_mfield_remove_connections_req_connections(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_connection(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_remove_connections_req_connections([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_remove_connections_req_connections(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_remove_connections_req_connections(Rest, Bin3, TrUserData);
e_field_remove_connections_req_connections([], Bin, _TrUserData) -> Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(remove_client_connections_req, Bin, TrUserData) -> id(decode_msg_remove_client_connections_req(Bin, TrUserData), TrUserData);
decode_msg_2_doit(remove_client_connections_res, Bin, TrUserData) -> id(decode_msg_remove_client_connections_res(Bin, TrUserData), TrUserData);
decode_msg_2_doit(unset_parent_group_from_channels_req, Bin, TrUserData) -> id(decode_msg_unset_parent_group_from_channels_req(Bin, TrUserData), TrUserData);
decode_msg_2_doit(unset_parent_group_from_channels_res, Bin, TrUserData) -> id(decode_msg_unset_parent_group_from_channels_res(Bin, TrUserData), TrUserData);
decode_msg_2_doit(authz_req, Bin, TrUserData) -> id(decode_msg_authz_req(Bin, TrUserData), TrUserData);
decode_msg_2_doit(authz_res, Bin, TrUserData) -> id(decode_msg_authz_res(Bin, TrUserData), TrUserData);
decode_msg_2_doit(retrieve_entities_req, Bin, TrUserData) -> id(decode_msg_retrieve_entities_req(Bin, TrUserData), TrUserData);
decode_msg_2_doit(retrieve_entities_res, Bin, TrUserData) -> id(decode_msg_retrieve_entities_res(Bin, TrUserData), TrUserData);
decode_msg_2_doit(retrieve_entity_req, Bin, TrUserData) -> id(decode_msg_retrieve_entity_req(Bin, TrUserData), TrUserData);
decode_msg_2_doit(retrieve_entity_res, Bin, TrUserData) -> id(decode_msg_retrieve_entity_res(Bin, TrUserData), TrUserData);
decode_msg_2_doit(entity_basic, Bin, TrUserData) -> id(decode_msg_entity_basic(Bin, TrUserData), TrUserData);
decode_msg_2_doit(add_connections_req, Bin, TrUserData) -> id(decode_msg_add_connections_req(Bin, TrUserData), TrUserData);
decode_msg_2_doit(add_connections_res, Bin, TrUserData) -> id(decode_msg_add_connections_res(Bin, TrUserData), TrUserData);
decode_msg_2_doit(remove_connections_req, Bin, TrUserData) -> id(decode_msg_remove_connections_req(Bin, TrUserData), TrUserData);
decode_msg_2_doit(remove_connections_res, Bin, TrUserData) -> id(decode_msg_remove_connections_res(Bin, TrUserData), TrUserData);
decode_msg_2_doit(connection, Bin, TrUserData) -> id(decode_msg_connection(Bin, TrUserData), TrUserData);
decode_msg_2_doit(retrieve_id_by_route_req, Bin, TrUserData) -> id(decode_msg_retrieve_id_by_route_req(Bin, TrUserData), TrUserData).



decode_msg_remove_client_connections_req(Bin, TrUserData) -> dfp_read_field_def_remove_client_connections_req(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_remove_client_connections_req(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_remove_client_connections_req_client_id(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_remove_client_connections_req(<<>>, 0, 0, _, F@_1, _) -> #{client_id => F@_1};
dfp_read_field_def_remove_client_connections_req(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_remove_client_connections_req(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_remove_client_connections_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_remove_client_connections_req(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_remove_client_connections_req(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_remove_client_connections_req_client_id(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_remove_client_connections_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_remove_client_connections_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_remove_client_connections_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_remove_client_connections_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_remove_client_connections_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_remove_client_connections_req(<<>>, 0, 0, _, F@_1, _) -> #{client_id => F@_1}.

d_field_remove_client_connections_req_client_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_remove_client_connections_req_client_id(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_remove_client_connections_req_client_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_remove_client_connections_req(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_remove_client_connections_req(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_remove_client_connections_req(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_remove_client_connections_req(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_remove_client_connections_req(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_remove_client_connections_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_remove_client_connections_req(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_remove_client_connections_req(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_remove_client_connections_req(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_remove_client_connections_req(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_remove_client_connections_req(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_remove_client_connections_req(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_remove_client_connections_req(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_remove_client_connections_req(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_remove_client_connections_req(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_remove_client_connections_res(Bin, TrUserData) -> dfp_read_field_def_remove_client_connections_res(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_remove_client_connections_res(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_remove_client_connections_res(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_remove_client_connections_res(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_remove_client_connections_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_remove_client_connections_res(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_remove_client_connections_res(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_remove_client_connections_res(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_remove_client_connections_res(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_remove_client_connections_res(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_remove_client_connections_res(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_remove_client_connections_res(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_remove_client_connections_res(<<>>, 0, 0, _, _) -> #{}.

skip_varint_remove_client_connections_res(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_remove_client_connections_res(Rest, Z1, Z2, F, TrUserData);
skip_varint_remove_client_connections_res(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_remove_client_connections_res(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_remove_client_connections_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_remove_client_connections_res(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_remove_client_connections_res(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_remove_client_connections_res(Rest2, 0, 0, F, TrUserData).

skip_group_remove_client_connections_res(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_remove_client_connections_res(Rest, 0, Z2, FNum, TrUserData).

skip_32_remove_client_connections_res(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_remove_client_connections_res(Rest, Z1, Z2, F, TrUserData).

skip_64_remove_client_connections_res(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_remove_client_connections_res(Rest, Z1, Z2, F, TrUserData).

decode_msg_unset_parent_group_from_channels_req(Bin, TrUserData) -> dfp_read_field_def_unset_parent_group_from_channels_req(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_unset_parent_group_from_channels_req(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_unset_parent_group_from_channels_req_parent_group_id(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_unset_parent_group_from_channels_req(<<>>, 0, 0, _, F@_1, _) -> #{parent_group_id => F@_1};
dfp_read_field_def_unset_parent_group_from_channels_req(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_unset_parent_group_from_channels_req(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_unset_parent_group_from_channels_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_unset_parent_group_from_channels_req(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_unset_parent_group_from_channels_req(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_unset_parent_group_from_channels_req_parent_group_id(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_unset_parent_group_from_channels_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_unset_parent_group_from_channels_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_unset_parent_group_from_channels_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_unset_parent_group_from_channels_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_unset_parent_group_from_channels_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_unset_parent_group_from_channels_req(<<>>, 0, 0, _, F@_1, _) -> #{parent_group_id => F@_1}.

d_field_unset_parent_group_from_channels_req_parent_group_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_unset_parent_group_from_channels_req_parent_group_id(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_unset_parent_group_from_channels_req_parent_group_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_unset_parent_group_from_channels_req(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_unset_parent_group_from_channels_req(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_unset_parent_group_from_channels_req(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_unset_parent_group_from_channels_req(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_unset_parent_group_from_channels_req(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_unset_parent_group_from_channels_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_unset_parent_group_from_channels_req(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_unset_parent_group_from_channels_req(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_unset_parent_group_from_channels_req(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_unset_parent_group_from_channels_req(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_unset_parent_group_from_channels_req(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_unset_parent_group_from_channels_req(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_unset_parent_group_from_channels_req(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_unset_parent_group_from_channels_req(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_unset_parent_group_from_channels_req(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_unset_parent_group_from_channels_res(Bin, TrUserData) -> dfp_read_field_def_unset_parent_group_from_channels_res(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_unset_parent_group_from_channels_res(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_unset_parent_group_from_channels_res(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_unset_parent_group_from_channels_res(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_unset_parent_group_from_channels_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_unset_parent_group_from_channels_res(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_unset_parent_group_from_channels_res(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_unset_parent_group_from_channels_res(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_unset_parent_group_from_channels_res(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_unset_parent_group_from_channels_res(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_unset_parent_group_from_channels_res(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_unset_parent_group_from_channels_res(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_unset_parent_group_from_channels_res(<<>>, 0, 0, _, _) -> #{}.

skip_varint_unset_parent_group_from_channels_res(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_unset_parent_group_from_channels_res(Rest, Z1, Z2, F, TrUserData);
skip_varint_unset_parent_group_from_channels_res(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_unset_parent_group_from_channels_res(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_unset_parent_group_from_channels_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_unset_parent_group_from_channels_res(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_unset_parent_group_from_channels_res(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_unset_parent_group_from_channels_res(Rest2, 0, 0, F, TrUserData).

skip_group_unset_parent_group_from_channels_res(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_unset_parent_group_from_channels_res(Rest, 0, Z2, FNum, TrUserData).

skip_32_unset_parent_group_from_channels_res(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_unset_parent_group_from_channels_res(Rest, Z1, Z2, F, TrUserData).

skip_64_unset_parent_group_from_channels_res(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_unset_parent_group_from_channels_res(Rest, Z1, Z2, F, TrUserData).

decode_msg_authz_req(Bin, TrUserData) -> dfp_read_field_def_authz_req(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_authz_req(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_authz_req_domain_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_authz_req(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_authz_req_client_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_authz_req(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_authz_req_client_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_authz_req(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_authz_req_channel_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_authz_req(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_authz_req_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_authz_req(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #{domain_id => F@_1, client_id => F@_2, client_type => F@_3, channel_id => F@_4, type => F@_5};
dfp_read_field_def_authz_req(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_authz_req(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_authz_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_authz_req(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_authz_req(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_authz_req_domain_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 -> d_field_authz_req_client_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> d_field_authz_req_client_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> d_field_authz_req_channel_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        40 -> d_field_authz_req_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_authz_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_authz_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_authz_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_authz_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_authz_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_authz_req(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #{domain_id => F@_1, client_id => F@_2, client_type => F@_3, channel_id => F@_4, type => F@_5}.

d_field_authz_req_domain_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_authz_req_domain_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_authz_req_domain_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_authz_req(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_authz_req_client_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_authz_req_client_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_authz_req_client_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_authz_req(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_authz_req_client_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_authz_req_client_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_authz_req_client_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_authz_req(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_authz_req_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_authz_req_channel_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_authz_req_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_authz_req(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_authz_req_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_authz_req_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_authz_req_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_authz_req(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_authz_req(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_authz_req(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_authz_req(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_authz_req(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_authz_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_authz_req(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_authz_req(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_authz_req(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_authz_req(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_authz_req(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_authz_req(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_authz_req(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_authz_req(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_authz_req(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_authz_res(Bin, TrUserData) -> dfp_read_field_def_authz_res(Bin, 0, 0, 0, id(false, TrUserData), TrUserData).

dfp_read_field_def_authz_res(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_authz_res_authorized(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_authz_res(<<>>, 0, 0, _, F@_1, _) -> #{authorized => F@_1};
dfp_read_field_def_authz_res(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_authz_res(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_authz_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_authz_res(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_authz_res(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_authz_res_authorized(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_authz_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_authz_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_authz_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_authz_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_authz_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_authz_res(<<>>, 0, 0, _, F@_1, _) -> #{authorized => F@_1}.

d_field_authz_res_authorized(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_authz_res_authorized(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_authz_res_authorized(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_authz_res(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_authz_res(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_authz_res(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_authz_res(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_authz_res(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_authz_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_authz_res(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_authz_res(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_authz_res(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_authz_res(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_authz_res(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_authz_res(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_authz_res(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_authz_res(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_authz_res(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_retrieve_entities_req(Bin, TrUserData) -> dfp_read_field_def_retrieve_entities_req(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_retrieve_entities_req(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_retrieve_entities_req_ids(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_retrieve_entities_req(<<>>, 0, 0, _, R1, TrUserData) -> #{ids => lists_reverse(R1, TrUserData)};
dfp_read_field_def_retrieve_entities_req(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_retrieve_entities_req(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_retrieve_entities_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_retrieve_entities_req(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_retrieve_entities_req(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_retrieve_entities_req_ids(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_retrieve_entities_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_retrieve_entities_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_retrieve_entities_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_retrieve_entities_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_retrieve_entities_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_retrieve_entities_req(<<>>, 0, 0, _, R1, TrUserData) -> #{ids => lists_reverse(R1, TrUserData)}.

d_field_retrieve_entities_req_ids(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_retrieve_entities_req_ids(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_retrieve_entities_req_ids(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_retrieve_entities_req(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_retrieve_entities_req(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_retrieve_entities_req(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_retrieve_entities_req(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_retrieve_entities_req(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_retrieve_entities_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_retrieve_entities_req(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_retrieve_entities_req(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_retrieve_entities_req(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_retrieve_entities_req(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_retrieve_entities_req(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_retrieve_entities_req(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_retrieve_entities_req(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_retrieve_entities_req(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_retrieve_entities_req(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_retrieve_entities_res(Bin, TrUserData) -> dfp_read_field_def_retrieve_entities_res(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), id(0, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_retrieve_entities_res(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_retrieve_entities_res_total(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_retrieve_entities_res(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_retrieve_entities_res_limit(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_retrieve_entities_res(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_retrieve_entities_res_offset(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_retrieve_entities_res(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_retrieve_entities_res_entities(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_retrieve_entities_res(<<>>, 0, 0, _, F@_1, F@_2, F@_3, R1, TrUserData) ->
    S1 = #{total => F@_1, limit => F@_2, offset => F@_3},
    if R1 == '$undef' -> S1;
       true -> S1#{entities => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_retrieve_entities_res(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_retrieve_entities_res(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_retrieve_entities_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_retrieve_entities_res(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_retrieve_entities_res(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_retrieve_entities_res_total(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_retrieve_entities_res_limit(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> d_field_retrieve_entities_res_offset(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_retrieve_entities_res_entities(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_retrieve_entities_res(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_retrieve_entities_res(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_retrieve_entities_res(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_retrieve_entities_res(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_retrieve_entities_res(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_retrieve_entities_res(<<>>, 0, 0, _, F@_1, F@_2, F@_3, R1, TrUserData) ->
    S1 = #{total => F@_1, limit => F@_2, offset => F@_3},
    if R1 == '$undef' -> S1;
       true -> S1#{entities => lists_reverse(R1, TrUserData)}
    end.

d_field_retrieve_entities_res_total(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_retrieve_entities_res_total(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_retrieve_entities_res_total(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_retrieve_entities_res(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_retrieve_entities_res_limit(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_retrieve_entities_res_limit(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_retrieve_entities_res_limit(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_retrieve_entities_res(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_retrieve_entities_res_offset(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_retrieve_entities_res_offset(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_retrieve_entities_res_offset(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_retrieve_entities_res(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_retrieve_entities_res_entities(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_retrieve_entities_res_entities(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_retrieve_entities_res_entities(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_entity_basic(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_retrieve_entities_res(RestF, 0, 0, F, F@_1, F@_2, F@_3, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_retrieve_entities_res(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_retrieve_entities_res(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_retrieve_entities_res(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_retrieve_entities_res(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_retrieve_entities_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_retrieve_entities_res(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_retrieve_entities_res(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_retrieve_entities_res(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_retrieve_entities_res(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_retrieve_entities_res(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_retrieve_entities_res(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_retrieve_entities_res(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_retrieve_entities_res(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_retrieve_entities_res(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_retrieve_entity_req(Bin, TrUserData) -> dfp_read_field_def_retrieve_entity_req(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_retrieve_entity_req(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_retrieve_entity_req_id(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_retrieve_entity_req(<<>>, 0, 0, _, F@_1, _) -> #{id => F@_1};
dfp_read_field_def_retrieve_entity_req(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_retrieve_entity_req(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_retrieve_entity_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_retrieve_entity_req(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_retrieve_entity_req(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_retrieve_entity_req_id(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_retrieve_entity_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_retrieve_entity_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_retrieve_entity_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_retrieve_entity_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_retrieve_entity_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_retrieve_entity_req(<<>>, 0, 0, _, F@_1, _) -> #{id => F@_1}.

d_field_retrieve_entity_req_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_retrieve_entity_req_id(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_retrieve_entity_req_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_retrieve_entity_req(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_retrieve_entity_req(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_retrieve_entity_req(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_retrieve_entity_req(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_retrieve_entity_req(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_retrieve_entity_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_retrieve_entity_req(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_retrieve_entity_req(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_retrieve_entity_req(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_retrieve_entity_req(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_retrieve_entity_req(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_retrieve_entity_req(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_retrieve_entity_req(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_retrieve_entity_req(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_retrieve_entity_req(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_retrieve_entity_res(Bin, TrUserData) -> dfp_read_field_def_retrieve_entity_res(Bin, 0, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_retrieve_entity_res(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_retrieve_entity_res_entity(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_retrieve_entity_res(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{entity => F@_1}
    end;
dfp_read_field_def_retrieve_entity_res(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_retrieve_entity_res(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_retrieve_entity_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_retrieve_entity_res(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_retrieve_entity_res(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_retrieve_entity_res_entity(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_retrieve_entity_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_retrieve_entity_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_retrieve_entity_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_retrieve_entity_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_retrieve_entity_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_retrieve_entity_res(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{entity => F@_1}
    end.

d_field_retrieve_entity_res_entity(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_retrieve_entity_res_entity(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_retrieve_entity_res_entity(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_entity_basic(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_retrieve_entity_res(RestF,
                                           0,
                                           0,
                                           F,
                                           if Prev == '$undef' -> NewFValue;
                                              true -> merge_msg_entity_basic(Prev, NewFValue, TrUserData)
                                           end,
                                           TrUserData).

skip_varint_retrieve_entity_res(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_retrieve_entity_res(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_retrieve_entity_res(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_retrieve_entity_res(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_retrieve_entity_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_retrieve_entity_res(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_retrieve_entity_res(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_retrieve_entity_res(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_retrieve_entity_res(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_retrieve_entity_res(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_retrieve_entity_res(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_retrieve_entity_res(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_retrieve_entity_res(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_retrieve_entity_res(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_entity_basic(Bin, TrUserData) -> dfp_read_field_def_entity_basic(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_entity_basic(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_entity_basic_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_entity_basic(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_entity_basic_domain_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_entity_basic(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_entity_basic_parent_group_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_entity_basic(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_entity_basic_status(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_entity_basic(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{id => F@_1, domain_id => F@_2, parent_group_id => F@_3, status => F@_4};
dfp_read_field_def_entity_basic(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_entity_basic(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_entity_basic(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_entity_basic(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_entity_basic(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_entity_basic_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_entity_basic_domain_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_entity_basic_parent_group_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_entity_basic_status(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_entity_basic(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_entity_basic(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_entity_basic(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_entity_basic(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_entity_basic(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_entity_basic(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{id => F@_1, domain_id => F@_2, parent_group_id => F@_3, status => F@_4}.

d_field_entity_basic_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_entity_basic_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_entity_basic_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_entity_basic(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_entity_basic_domain_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_entity_basic_domain_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_entity_basic_domain_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_entity_basic(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_entity_basic_parent_group_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_entity_basic_parent_group_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_entity_basic_parent_group_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_entity_basic(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_entity_basic_status(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_entity_basic_status(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_entity_basic_status(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_entity_basic(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_entity_basic(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_entity_basic(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_entity_basic(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_entity_basic(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_entity_basic(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_entity_basic(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_entity_basic(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_entity_basic(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_entity_basic(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_entity_basic(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_entity_basic(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_entity_basic(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_entity_basic(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_entity_basic(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_add_connections_req(Bin, TrUserData) -> dfp_read_field_def_add_connections_req(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_add_connections_req(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_add_connections_req_connections(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_add_connections_req(<<>>, 0, 0, _, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{connections => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_add_connections_req(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_add_connections_req(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_add_connections_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_add_connections_req(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_add_connections_req(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_add_connections_req_connections(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_add_connections_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_add_connections_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_add_connections_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_add_connections_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_add_connections_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_add_connections_req(<<>>, 0, 0, _, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{connections => lists_reverse(R1, TrUserData)}
    end.

d_field_add_connections_req_connections(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_add_connections_req_connections(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_add_connections_req_connections(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_connection(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_add_connections_req(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_add_connections_req(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_add_connections_req(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_add_connections_req(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_add_connections_req(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_add_connections_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_add_connections_req(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_add_connections_req(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_add_connections_req(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_add_connections_req(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_add_connections_req(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_add_connections_req(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_add_connections_req(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_add_connections_req(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_add_connections_req(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_add_connections_res(Bin, TrUserData) -> dfp_read_field_def_add_connections_res(Bin, 0, 0, 0, id(false, TrUserData), TrUserData).

dfp_read_field_def_add_connections_res(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_add_connections_res_ok(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_add_connections_res(<<>>, 0, 0, _, F@_1, _) -> #{ok => F@_1};
dfp_read_field_def_add_connections_res(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_add_connections_res(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_add_connections_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_add_connections_res(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_add_connections_res(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_add_connections_res_ok(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_add_connections_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_add_connections_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_add_connections_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_add_connections_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_add_connections_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_add_connections_res(<<>>, 0, 0, _, F@_1, _) -> #{ok => F@_1}.

d_field_add_connections_res_ok(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_add_connections_res_ok(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_add_connections_res_ok(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_add_connections_res(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_add_connections_res(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_add_connections_res(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_add_connections_res(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_add_connections_res(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_add_connections_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_add_connections_res(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_add_connections_res(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_add_connections_res(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_add_connections_res(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_add_connections_res(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_add_connections_res(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_add_connections_res(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_add_connections_res(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_add_connections_res(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_remove_connections_req(Bin, TrUserData) -> dfp_read_field_def_remove_connections_req(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_remove_connections_req(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_remove_connections_req_connections(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_remove_connections_req(<<>>, 0, 0, _, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{connections => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_remove_connections_req(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_remove_connections_req(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_remove_connections_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_remove_connections_req(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_remove_connections_req(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_remove_connections_req_connections(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_remove_connections_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_remove_connections_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_remove_connections_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_remove_connections_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_remove_connections_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_remove_connections_req(<<>>, 0, 0, _, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{connections => lists_reverse(R1, TrUserData)}
    end.

d_field_remove_connections_req_connections(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_remove_connections_req_connections(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_remove_connections_req_connections(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_connection(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_remove_connections_req(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_remove_connections_req(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_remove_connections_req(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_remove_connections_req(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_remove_connections_req(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_remove_connections_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_remove_connections_req(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_remove_connections_req(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_remove_connections_req(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_remove_connections_req(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_remove_connections_req(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_remove_connections_req(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_remove_connections_req(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_remove_connections_req(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_remove_connections_req(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_remove_connections_res(Bin, TrUserData) -> dfp_read_field_def_remove_connections_res(Bin, 0, 0, 0, id(false, TrUserData), TrUserData).

dfp_read_field_def_remove_connections_res(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_remove_connections_res_ok(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_remove_connections_res(<<>>, 0, 0, _, F@_1, _) -> #{ok => F@_1};
dfp_read_field_def_remove_connections_res(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_remove_connections_res(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_remove_connections_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_remove_connections_res(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_remove_connections_res(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_remove_connections_res_ok(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_remove_connections_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_remove_connections_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_remove_connections_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_remove_connections_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_remove_connections_res(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_remove_connections_res(<<>>, 0, 0, _, F@_1, _) -> #{ok => F@_1}.

d_field_remove_connections_res_ok(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_remove_connections_res_ok(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_remove_connections_res_ok(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_remove_connections_res(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_remove_connections_res(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_remove_connections_res(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_remove_connections_res(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_remove_connections_res(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_remove_connections_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_remove_connections_res(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_remove_connections_res(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_remove_connections_res(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_remove_connections_res(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_remove_connections_res(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_remove_connections_res(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_remove_connections_res(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_remove_connections_res(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_remove_connections_res(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_connection(Bin, TrUserData) -> dfp_read_field_def_connection(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_connection(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_connection_client_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_connection(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_connection_channel_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_connection(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_connection_domain_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_connection(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_connection_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_connection(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{client_id => F@_1, channel_id => F@_2, domain_id => F@_3, type => F@_4};
dfp_read_field_def_connection(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_connection(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_connection(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_connection(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_connection(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_connection_client_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_connection_channel_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_connection_domain_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_connection_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_connection(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_connection(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_connection(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_connection(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_connection(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_connection(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{client_id => F@_1, channel_id => F@_2, domain_id => F@_3, type => F@_4}.

d_field_connection_client_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_connection_client_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_connection_client_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_connection(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_connection_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_connection_channel_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_connection_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_connection(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_connection_domain_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_connection_domain_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_connection_domain_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_connection(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_connection_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_connection_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_connection_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_connection(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_connection(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_connection(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_connection(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_connection(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_connection(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_connection(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_connection(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_connection(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_connection(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_connection(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_connection(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_connection(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_connection(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_connection(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_retrieve_id_by_route_req(Bin, TrUserData) -> dfp_read_field_def_retrieve_id_by_route_req(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_retrieve_id_by_route_req(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_retrieve_id_by_route_req_route(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_retrieve_id_by_route_req(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_retrieve_id_by_route_req_domain_id(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_retrieve_id_by_route_req(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{route => F@_1, domain_id => F@_2};
dfp_read_field_def_retrieve_id_by_route_req(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_retrieve_id_by_route_req(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_retrieve_id_by_route_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_retrieve_id_by_route_req(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_retrieve_id_by_route_req(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_retrieve_id_by_route_req_route(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_retrieve_id_by_route_req_domain_id(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_retrieve_id_by_route_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_retrieve_id_by_route_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_retrieve_id_by_route_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_retrieve_id_by_route_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_retrieve_id_by_route_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_retrieve_id_by_route_req(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{route => F@_1, domain_id => F@_2}.

d_field_retrieve_id_by_route_req_route(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_retrieve_id_by_route_req_route(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_retrieve_id_by_route_req_route(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_retrieve_id_by_route_req(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_retrieve_id_by_route_req_domain_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_retrieve_id_by_route_req_domain_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_retrieve_id_by_route_req_domain_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_retrieve_id_by_route_req(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_retrieve_id_by_route_req(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_retrieve_id_by_route_req(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_retrieve_id_by_route_req(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_retrieve_id_by_route_req(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_retrieve_id_by_route_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_retrieve_id_by_route_req(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_retrieve_id_by_route_req(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_retrieve_id_by_route_req(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_retrieve_id_by_route_req(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_retrieve_id_by_route_req(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_retrieve_id_by_route_req(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_retrieve_id_by_route_req(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_retrieve_id_by_route_req(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_retrieve_id_by_route_req(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        remove_client_connections_req -> merge_msg_remove_client_connections_req(Prev, New, TrUserData);
        remove_client_connections_res -> merge_msg_remove_client_connections_res(Prev, New, TrUserData);
        unset_parent_group_from_channels_req -> merge_msg_unset_parent_group_from_channels_req(Prev, New, TrUserData);
        unset_parent_group_from_channels_res -> merge_msg_unset_parent_group_from_channels_res(Prev, New, TrUserData);
        authz_req -> merge_msg_authz_req(Prev, New, TrUserData);
        authz_res -> merge_msg_authz_res(Prev, New, TrUserData);
        retrieve_entities_req -> merge_msg_retrieve_entities_req(Prev, New, TrUserData);
        retrieve_entities_res -> merge_msg_retrieve_entities_res(Prev, New, TrUserData);
        retrieve_entity_req -> merge_msg_retrieve_entity_req(Prev, New, TrUserData);
        retrieve_entity_res -> merge_msg_retrieve_entity_res(Prev, New, TrUserData);
        entity_basic -> merge_msg_entity_basic(Prev, New, TrUserData);
        add_connections_req -> merge_msg_add_connections_req(Prev, New, TrUserData);
        add_connections_res -> merge_msg_add_connections_res(Prev, New, TrUserData);
        remove_connections_req -> merge_msg_remove_connections_req(Prev, New, TrUserData);
        remove_connections_res -> merge_msg_remove_connections_res(Prev, New, TrUserData);
        connection -> merge_msg_connection(Prev, New, TrUserData);
        retrieve_id_by_route_req -> merge_msg_retrieve_id_by_route_req(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_remove_client_connections_req/3}).
merge_msg_remove_client_connections_req(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{client_id := NFclient_id}} -> S1#{client_id => NFclient_id};
        {#{client_id := PFclient_id}, _} -> S1#{client_id => PFclient_id};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_remove_client_connections_res/3}).
merge_msg_remove_client_connections_res(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_unset_parent_group_from_channels_req/3}).
merge_msg_unset_parent_group_from_channels_req(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{parent_group_id := NFparent_group_id}} -> S1#{parent_group_id => NFparent_group_id};
        {#{parent_group_id := PFparent_group_id}, _} -> S1#{parent_group_id => PFparent_group_id};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_unset_parent_group_from_channels_res/3}).
merge_msg_unset_parent_group_from_channels_res(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_authz_req/3}).
merge_msg_authz_req(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{domain_id := NFdomain_id}} -> S1#{domain_id => NFdomain_id};
             {#{domain_id := PFdomain_id}, _} -> S1#{domain_id => PFdomain_id};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{client_id := NFclient_id}} -> S2#{client_id => NFclient_id};
             {#{client_id := PFclient_id}, _} -> S2#{client_id => PFclient_id};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{client_type := NFclient_type}} -> S3#{client_type => NFclient_type};
             {#{client_type := PFclient_type}, _} -> S3#{client_type => PFclient_type};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{channel_id := NFchannel_id}} -> S4#{channel_id => NFchannel_id};
             {#{channel_id := PFchannel_id}, _} -> S4#{channel_id => PFchannel_id};
             _ -> S4
         end,
    case {PMsg, NMsg} of
        {_, #{type := NFtype}} -> S5#{type => NFtype};
        {#{type := PFtype}, _} -> S5#{type => PFtype};
        _ -> S5
    end.

-compile({nowarn_unused_function,merge_msg_authz_res/3}).
merge_msg_authz_res(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{authorized := NFauthorized}} -> S1#{authorized => NFauthorized};
        {#{authorized := PFauthorized}, _} -> S1#{authorized => PFauthorized};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_retrieve_entities_req/3}).
merge_msg_retrieve_entities_req(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{ids := PFids}, #{ids := NFids}} -> S1#{ids => 'erlang_++'(PFids, NFids, TrUserData)};
        {_, #{ids := NFids}} -> S1#{ids => NFids};
        {#{ids := PFids}, _} -> S1#{ids => PFids};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_retrieve_entities_res/3}).
merge_msg_retrieve_entities_res(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{total := NFtotal}} -> S1#{total => NFtotal};
             {#{total := PFtotal}, _} -> S1#{total => PFtotal};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{limit := NFlimit}} -> S2#{limit => NFlimit};
             {#{limit := PFlimit}, _} -> S2#{limit => PFlimit};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{offset := NFoffset}} -> S3#{offset => NFoffset};
             {#{offset := PFoffset}, _} -> S3#{offset => PFoffset};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {#{entities := PFentities}, #{entities := NFentities}} -> S4#{entities => 'erlang_++'(PFentities, NFentities, TrUserData)};
        {_, #{entities := NFentities}} -> S4#{entities => NFentities};
        {#{entities := PFentities}, _} -> S4#{entities => PFentities};
        {_, _} -> S4
    end.

-compile({nowarn_unused_function,merge_msg_retrieve_entity_req/3}).
merge_msg_retrieve_entity_req(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{id := NFid}} -> S1#{id => NFid};
        {#{id := PFid}, _} -> S1#{id => PFid};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_retrieve_entity_res/3}).
merge_msg_retrieve_entity_res(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{entity := PFentity}, #{entity := NFentity}} -> S1#{entity => merge_msg_entity_basic(PFentity, NFentity, TrUserData)};
        {_, #{entity := NFentity}} -> S1#{entity => NFentity};
        {#{entity := PFentity}, _} -> S1#{entity => PFentity};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_entity_basic/3}).
merge_msg_entity_basic(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{id := NFid}} -> S1#{id => NFid};
             {#{id := PFid}, _} -> S1#{id => PFid};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{domain_id := NFdomain_id}} -> S2#{domain_id => NFdomain_id};
             {#{domain_id := PFdomain_id}, _} -> S2#{domain_id => PFdomain_id};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{parent_group_id := NFparent_group_id}} -> S3#{parent_group_id => NFparent_group_id};
             {#{parent_group_id := PFparent_group_id}, _} -> S3#{parent_group_id => PFparent_group_id};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{status := NFstatus}} -> S4#{status => NFstatus};
        {#{status := PFstatus}, _} -> S4#{status => PFstatus};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_add_connections_req/3}).
merge_msg_add_connections_req(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{connections := PFconnections}, #{connections := NFconnections}} -> S1#{connections => 'erlang_++'(PFconnections, NFconnections, TrUserData)};
        {_, #{connections := NFconnections}} -> S1#{connections => NFconnections};
        {#{connections := PFconnections}, _} -> S1#{connections => PFconnections};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_add_connections_res/3}).
merge_msg_add_connections_res(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{ok := NFok}} -> S1#{ok => NFok};
        {#{ok := PFok}, _} -> S1#{ok => PFok};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_remove_connections_req/3}).
merge_msg_remove_connections_req(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{connections := PFconnections}, #{connections := NFconnections}} -> S1#{connections => 'erlang_++'(PFconnections, NFconnections, TrUserData)};
        {_, #{connections := NFconnections}} -> S1#{connections => NFconnections};
        {#{connections := PFconnections}, _} -> S1#{connections => PFconnections};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_remove_connections_res/3}).
merge_msg_remove_connections_res(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{ok := NFok}} -> S1#{ok => NFok};
        {#{ok := PFok}, _} -> S1#{ok => PFok};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_connection/3}).
merge_msg_connection(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{client_id := NFclient_id}} -> S1#{client_id => NFclient_id};
             {#{client_id := PFclient_id}, _} -> S1#{client_id => PFclient_id};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{channel_id := NFchannel_id}} -> S2#{channel_id => NFchannel_id};
             {#{channel_id := PFchannel_id}, _} -> S2#{channel_id => PFchannel_id};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{domain_id := NFdomain_id}} -> S3#{domain_id => NFdomain_id};
             {#{domain_id := PFdomain_id}, _} -> S3#{domain_id => PFdomain_id};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{type := NFtype}} -> S4#{type => NFtype};
        {#{type := PFtype}, _} -> S4#{type => PFtype};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_retrieve_id_by_route_req/3}).
merge_msg_retrieve_id_by_route_req(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{route := NFroute}} -> S1#{route => NFroute};
             {#{route := PFroute}, _} -> S1#{route => PFroute};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{domain_id := NFdomain_id}} -> S2#{domain_id => NFdomain_id};
        {#{domain_id := PFdomain_id}, _} -> S2#{domain_id => PFdomain_id};
        _ -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        remove_client_connections_req -> v_msg_remove_client_connections_req(Msg, [MsgName], TrUserData);
        remove_client_connections_res -> v_msg_remove_client_connections_res(Msg, [MsgName], TrUserData);
        unset_parent_group_from_channels_req -> v_msg_unset_parent_group_from_channels_req(Msg, [MsgName], TrUserData);
        unset_parent_group_from_channels_res -> v_msg_unset_parent_group_from_channels_res(Msg, [MsgName], TrUserData);
        authz_req -> v_msg_authz_req(Msg, [MsgName], TrUserData);
        authz_res -> v_msg_authz_res(Msg, [MsgName], TrUserData);
        retrieve_entities_req -> v_msg_retrieve_entities_req(Msg, [MsgName], TrUserData);
        retrieve_entities_res -> v_msg_retrieve_entities_res(Msg, [MsgName], TrUserData);
        retrieve_entity_req -> v_msg_retrieve_entity_req(Msg, [MsgName], TrUserData);
        retrieve_entity_res -> v_msg_retrieve_entity_res(Msg, [MsgName], TrUserData);
        entity_basic -> v_msg_entity_basic(Msg, [MsgName], TrUserData);
        add_connections_req -> v_msg_add_connections_req(Msg, [MsgName], TrUserData);
        add_connections_res -> v_msg_add_connections_res(Msg, [MsgName], TrUserData);
        remove_connections_req -> v_msg_remove_connections_req(Msg, [MsgName], TrUserData);
        remove_connections_res -> v_msg_remove_connections_res(Msg, [MsgName], TrUserData);
        connection -> v_msg_connection(Msg, [MsgName], TrUserData);
        retrieve_id_by_route_req -> v_msg_retrieve_id_by_route_req(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_remove_client_connections_req/3}).
-dialyzer({nowarn_function,v_msg_remove_client_connections_req/3}).
v_msg_remove_client_connections_req(#{} = M, Path, TrUserData) ->
    case M of
        #{client_id := F1} -> v_type_string(F1, [client_id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (client_id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_remove_client_connections_req(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), remove_client_connections_req}, M, Path);
v_msg_remove_client_connections_req(X, Path, _TrUserData) -> mk_type_error({expected_msg, remove_client_connections_req}, X, Path).

-compile({nowarn_unused_function,v_msg_remove_client_connections_res/3}).
-dialyzer({nowarn_function,v_msg_remove_client_connections_res/3}).
v_msg_remove_client_connections_res(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_remove_client_connections_res(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), remove_client_connections_res}, M, Path);
v_msg_remove_client_connections_res(X, Path, _TrUserData) -> mk_type_error({expected_msg, remove_client_connections_res}, X, Path).

-compile({nowarn_unused_function,v_msg_unset_parent_group_from_channels_req/3}).
-dialyzer({nowarn_function,v_msg_unset_parent_group_from_channels_req/3}).
v_msg_unset_parent_group_from_channels_req(#{} = M, Path, TrUserData) ->
    case M of
        #{parent_group_id := F1} -> v_type_string(F1, [parent_group_id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (parent_group_id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_unset_parent_group_from_channels_req(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), unset_parent_group_from_channels_req}, M, Path);
v_msg_unset_parent_group_from_channels_req(X, Path, _TrUserData) -> mk_type_error({expected_msg, unset_parent_group_from_channels_req}, X, Path).

-compile({nowarn_unused_function,v_msg_unset_parent_group_from_channels_res/3}).
-dialyzer({nowarn_function,v_msg_unset_parent_group_from_channels_res/3}).
v_msg_unset_parent_group_from_channels_res(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_unset_parent_group_from_channels_res(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), unset_parent_group_from_channels_res}, M, Path);
v_msg_unset_parent_group_from_channels_res(X, Path, _TrUserData) -> mk_type_error({expected_msg, unset_parent_group_from_channels_res}, X, Path).

-compile({nowarn_unused_function,v_msg_authz_req/3}).
-dialyzer({nowarn_function,v_msg_authz_req/3}).
v_msg_authz_req(#{} = M, Path, TrUserData) ->
    case M of
        #{domain_id := F1} -> v_type_string(F1, [domain_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{client_id := F2} -> v_type_string(F2, [client_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{client_type := F3} -> v_type_string(F3, [client_type | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{channel_id := F4} -> v_type_string(F4, [channel_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{type := F5} -> v_type_uint32(F5, [type | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (domain_id) -> ok;
                      (client_id) -> ok;
                      (client_type) -> ok;
                      (channel_id) -> ok;
                      (type) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_authz_req(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), authz_req}, M, Path);
v_msg_authz_req(X, Path, _TrUserData) -> mk_type_error({expected_msg, authz_req}, X, Path).

-compile({nowarn_unused_function,v_msg_authz_res/3}).
-dialyzer({nowarn_function,v_msg_authz_res/3}).
v_msg_authz_res(#{} = M, Path, TrUserData) ->
    case M of
        #{authorized := F1} -> v_type_bool(F1, [authorized | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (authorized) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_authz_res(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), authz_res}, M, Path);
v_msg_authz_res(X, Path, _TrUserData) -> mk_type_error({expected_msg, authz_res}, X, Path).

-compile({nowarn_unused_function,v_msg_retrieve_entities_req/3}).
-dialyzer({nowarn_function,v_msg_retrieve_entities_req/3}).
v_msg_retrieve_entities_req(#{} = M, Path, TrUserData) ->
    case M of
        #{ids := F1} ->
            if is_list(F1) ->
                   _ = [v_type_string(Elem, [ids | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, string}, F1, [ids | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (ids) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_retrieve_entities_req(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), retrieve_entities_req}, M, Path);
v_msg_retrieve_entities_req(X, Path, _TrUserData) -> mk_type_error({expected_msg, retrieve_entities_req}, X, Path).

-compile({nowarn_unused_function,v_msg_retrieve_entities_res/3}).
-dialyzer({nowarn_function,v_msg_retrieve_entities_res/3}).
v_msg_retrieve_entities_res(#{} = M, Path, TrUserData) ->
    case M of
        #{total := F1} -> v_type_uint64(F1, [total | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{limit := F2} -> v_type_uint64(F2, [limit | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{offset := F3} -> v_type_uint64(F3, [offset | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{entities := F4} ->
            if is_list(F4) ->
                   _ = [v_submsg_entity_basic(Elem, [entities | Path], TrUserData) || Elem <- F4],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, entity_basic}}, F4, [entities | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (total) -> ok;
                      (limit) -> ok;
                      (offset) -> ok;
                      (entities) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_retrieve_entities_res(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), retrieve_entities_res}, M, Path);
v_msg_retrieve_entities_res(X, Path, _TrUserData) -> mk_type_error({expected_msg, retrieve_entities_res}, X, Path).

-compile({nowarn_unused_function,v_msg_retrieve_entity_req/3}).
-dialyzer({nowarn_function,v_msg_retrieve_entity_req/3}).
v_msg_retrieve_entity_req(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} -> v_type_string(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_retrieve_entity_req(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), retrieve_entity_req}, M, Path);
v_msg_retrieve_entity_req(X, Path, _TrUserData) -> mk_type_error({expected_msg, retrieve_entity_req}, X, Path).

-compile({nowarn_unused_function,v_msg_retrieve_entity_res/3}).
-dialyzer({nowarn_function,v_msg_retrieve_entity_res/3}).
v_msg_retrieve_entity_res(#{} = M, Path, TrUserData) ->
    case M of
        #{entity := F1} -> v_submsg_entity_basic(F1, [entity | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (entity) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_retrieve_entity_res(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), retrieve_entity_res}, M, Path);
v_msg_retrieve_entity_res(X, Path, _TrUserData) -> mk_type_error({expected_msg, retrieve_entity_res}, X, Path).

-compile({nowarn_unused_function,v_submsg_entity_basic/3}).
-dialyzer({nowarn_function,v_submsg_entity_basic/3}).
v_submsg_entity_basic(Msg, Path, TrUserData) -> v_msg_entity_basic(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_entity_basic/3}).
-dialyzer({nowarn_function,v_msg_entity_basic/3}).
v_msg_entity_basic(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} -> v_type_string(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{domain_id := F2} -> v_type_string(F2, [domain_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{parent_group_id := F3} -> v_type_string(F3, [parent_group_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{status := F4} -> v_type_uint32(F4, [status | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (domain_id) -> ok;
                      (parent_group_id) -> ok;
                      (status) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_entity_basic(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), entity_basic}, M, Path);
v_msg_entity_basic(X, Path, _TrUserData) -> mk_type_error({expected_msg, entity_basic}, X, Path).

-compile({nowarn_unused_function,v_msg_add_connections_req/3}).
-dialyzer({nowarn_function,v_msg_add_connections_req/3}).
v_msg_add_connections_req(#{} = M, Path, TrUserData) ->
    case M of
        #{connections := F1} ->
            if is_list(F1) ->
                   _ = [v_submsg_connection(Elem, [connections | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, connection}}, F1, [connections | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (connections) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_add_connections_req(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), add_connections_req}, M, Path);
v_msg_add_connections_req(X, Path, _TrUserData) -> mk_type_error({expected_msg, add_connections_req}, X, Path).

-compile({nowarn_unused_function,v_msg_add_connections_res/3}).
-dialyzer({nowarn_function,v_msg_add_connections_res/3}).
v_msg_add_connections_res(#{} = M, Path, TrUserData) ->
    case M of
        #{ok := F1} -> v_type_bool(F1, [ok | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (ok) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_add_connections_res(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), add_connections_res}, M, Path);
v_msg_add_connections_res(X, Path, _TrUserData) -> mk_type_error({expected_msg, add_connections_res}, X, Path).

-compile({nowarn_unused_function,v_msg_remove_connections_req/3}).
-dialyzer({nowarn_function,v_msg_remove_connections_req/3}).
v_msg_remove_connections_req(#{} = M, Path, TrUserData) ->
    case M of
        #{connections := F1} ->
            if is_list(F1) ->
                   _ = [v_submsg_connection(Elem, [connections | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, connection}}, F1, [connections | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (connections) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_remove_connections_req(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), remove_connections_req}, M, Path);
v_msg_remove_connections_req(X, Path, _TrUserData) -> mk_type_error({expected_msg, remove_connections_req}, X, Path).

-compile({nowarn_unused_function,v_msg_remove_connections_res/3}).
-dialyzer({nowarn_function,v_msg_remove_connections_res/3}).
v_msg_remove_connections_res(#{} = M, Path, TrUserData) ->
    case M of
        #{ok := F1} -> v_type_bool(F1, [ok | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (ok) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_remove_connections_res(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), remove_connections_res}, M, Path);
v_msg_remove_connections_res(X, Path, _TrUserData) -> mk_type_error({expected_msg, remove_connections_res}, X, Path).

-compile({nowarn_unused_function,v_submsg_connection/3}).
-dialyzer({nowarn_function,v_submsg_connection/3}).
v_submsg_connection(Msg, Path, TrUserData) -> v_msg_connection(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_connection/3}).
-dialyzer({nowarn_function,v_msg_connection/3}).
v_msg_connection(#{} = M, Path, TrUserData) ->
    case M of
        #{client_id := F1} -> v_type_string(F1, [client_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{channel_id := F2} -> v_type_string(F2, [channel_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{domain_id := F3} -> v_type_string(F3, [domain_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{type := F4} -> v_type_uint32(F4, [type | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (client_id) -> ok;
                      (channel_id) -> ok;
                      (domain_id) -> ok;
                      (type) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_connection(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), connection}, M, Path);
v_msg_connection(X, Path, _TrUserData) -> mk_type_error({expected_msg, connection}, X, Path).

-compile({nowarn_unused_function,v_msg_retrieve_id_by_route_req/3}).
-dialyzer({nowarn_function,v_msg_retrieve_id_by_route_req/3}).
v_msg_retrieve_id_by_route_req(#{} = M, Path, TrUserData) ->
    case M of
        #{route := F1} -> v_type_string(F1, [route | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{domain_id := F2} -> v_type_string(F2, [domain_id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (route) -> ok;
                      (domain_id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_retrieve_id_by_route_req(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), retrieve_id_by_route_req}, M, Path);
v_msg_retrieve_id_by_route_req(X, Path, _TrUserData) -> mk_type_error({expected_msg, retrieve_id_by_route_req}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when is_integer(N), 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when is_integer(N), 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, remove_client_connections_req}, [#{name => client_id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}]},
     {{msg, remove_client_connections_res}, []},
     {{msg, unset_parent_group_from_channels_req}, [#{name => parent_group_id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}]},
     {{msg, unset_parent_group_from_channels_res}, []},
     {{msg, authz_req},
      [#{name => domain_id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => client_id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => client_type, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []},
       #{name => channel_id, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []},
       #{name => type, fnum => 5, rnum => 6, type => uint32, occurrence => optional, opts => []}]},
     {{msg, authz_res}, [#{name => authorized, fnum => 1, rnum => 2, type => bool, occurrence => optional, opts => []}]},
     {{msg, retrieve_entities_req}, [#{name => ids, fnum => 1, rnum => 2, type => string, occurrence => repeated, opts => []}]},
     {{msg, retrieve_entities_res},
      [#{name => total, fnum => 1, rnum => 2, type => uint64, occurrence => optional, opts => []},
       #{name => limit, fnum => 2, rnum => 3, type => uint64, occurrence => optional, opts => []},
       #{name => offset, fnum => 3, rnum => 4, type => uint64, occurrence => optional, opts => []},
       #{name => entities, fnum => 4, rnum => 5, type => {msg, entity_basic}, occurrence => repeated, opts => []}]},
     {{msg, retrieve_entity_req}, [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}]},
     {{msg, retrieve_entity_res}, [#{name => entity, fnum => 1, rnum => 2, type => {msg, entity_basic}, occurrence => optional, opts => []}]},
     {{msg, entity_basic},
      [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => domain_id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => parent_group_id, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []},
       #{name => status, fnum => 4, rnum => 5, type => uint32, occurrence => optional, opts => []}]},
     {{msg, add_connections_req}, [#{name => connections, fnum => 1, rnum => 2, type => {msg, connection}, occurrence => repeated, opts => []}]},
     {{msg, add_connections_res}, [#{name => ok, fnum => 1, rnum => 2, type => bool, occurrence => optional, opts => []}]},
     {{msg, remove_connections_req}, [#{name => connections, fnum => 1, rnum => 2, type => {msg, connection}, occurrence => repeated, opts => []}]},
     {{msg, remove_connections_res}, [#{name => ok, fnum => 1, rnum => 2, type => bool, occurrence => optional, opts => []}]},
     {{msg, connection},
      [#{name => client_id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => channel_id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => domain_id, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []},
       #{name => type, fnum => 4, rnum => 5, type => uint32, occurrence => optional, opts => []}]},
     {{msg, retrieve_id_by_route_req}, [#{name => route, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => domain_id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}]}].


get_msg_names() ->
    [remove_client_connections_req,
     remove_client_connections_res,
     unset_parent_group_from_channels_req,
     unset_parent_group_from_channels_res,
     authz_req,
     authz_res,
     retrieve_entities_req,
     retrieve_entities_res,
     retrieve_entity_req,
     retrieve_entity_res,
     entity_basic,
     add_connections_req,
     add_connections_res,
     remove_connections_req,
     remove_connections_res,
     connection,
     retrieve_id_by_route_req].


get_group_names() -> [].


get_msg_or_group_names() ->
    [remove_client_connections_req,
     remove_client_connections_res,
     unset_parent_group_from_channels_req,
     unset_parent_group_from_channels_res,
     authz_req,
     authz_res,
     retrieve_entities_req,
     retrieve_entities_res,
     retrieve_entity_req,
     retrieve_entity_res,
     entity_basic,
     add_connections_req,
     add_connections_res,
     remove_connections_req,
     remove_connections_res,
     connection,
     retrieve_id_by_route_req].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).


find_msg_def(remove_client_connections_req) -> [#{name => client_id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}];
find_msg_def(remove_client_connections_res) -> [];
find_msg_def(unset_parent_group_from_channels_req) -> [#{name => parent_group_id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}];
find_msg_def(unset_parent_group_from_channels_res) -> [];
find_msg_def(authz_req) ->
    [#{name => domain_id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => client_id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => client_type, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []},
     #{name => channel_id, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []},
     #{name => type, fnum => 5, rnum => 6, type => uint32, occurrence => optional, opts => []}];
find_msg_def(authz_res) -> [#{name => authorized, fnum => 1, rnum => 2, type => bool, occurrence => optional, opts => []}];
find_msg_def(retrieve_entities_req) -> [#{name => ids, fnum => 1, rnum => 2, type => string, occurrence => repeated, opts => []}];
find_msg_def(retrieve_entities_res) ->
    [#{name => total, fnum => 1, rnum => 2, type => uint64, occurrence => optional, opts => []},
     #{name => limit, fnum => 2, rnum => 3, type => uint64, occurrence => optional, opts => []},
     #{name => offset, fnum => 3, rnum => 4, type => uint64, occurrence => optional, opts => []},
     #{name => entities, fnum => 4, rnum => 5, type => {msg, entity_basic}, occurrence => repeated, opts => []}];
find_msg_def(retrieve_entity_req) -> [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}];
find_msg_def(retrieve_entity_res) -> [#{name => entity, fnum => 1, rnum => 2, type => {msg, entity_basic}, occurrence => optional, opts => []}];
find_msg_def(entity_basic) ->
    [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => domain_id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => parent_group_id, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []},
     #{name => status, fnum => 4, rnum => 5, type => uint32, occurrence => optional, opts => []}];
find_msg_def(add_connections_req) -> [#{name => connections, fnum => 1, rnum => 2, type => {msg, connection}, occurrence => repeated, opts => []}];
find_msg_def(add_connections_res) -> [#{name => ok, fnum => 1, rnum => 2, type => bool, occurrence => optional, opts => []}];
find_msg_def(remove_connections_req) -> [#{name => connections, fnum => 1, rnum => 2, type => {msg, connection}, occurrence => repeated, opts => []}];
find_msg_def(remove_connections_res) -> [#{name => ok, fnum => 1, rnum => 2, type => bool, occurrence => optional, opts => []}];
find_msg_def(connection) ->
    [#{name => client_id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => channel_id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => domain_id, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []},
     #{name => type, fnum => 4, rnum => 5, type => uint32, occurrence => optional, opts => []}];
find_msg_def(retrieve_id_by_route_req) -> [#{name => route, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => domain_id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['channels.v1.ChannelsService'].


get_service_def('channels.v1.ChannelsService') ->
    {{service, 'channels.v1.ChannelsService'},
     [#{name => 'Authorize', input => authz_req, output => authz_res, input_stream => false, output_stream => false, opts => []},
      #{name => 'RemoveClientConnections', input => remove_client_connections_req, output => remove_client_connections_res, input_stream => false, output_stream => false, opts => []},
      #{name => 'UnsetParentGroupFromChannels', input => unset_parent_group_from_channels_req, output => unset_parent_group_from_channels_res, input_stream => false, output_stream => false, opts => []},
      #{name => 'RetrieveEntity', input => retrieve_entity_req, output => retrieve_entity_res, input_stream => false, output_stream => false, opts => []},
      #{name => 'RetrieveIDByRoute', input => retrieve_id_by_route_req, output => retrieve_entity_res, input_stream => false, output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('channels.v1.ChannelsService') -> ['Authorize', 'RemoveClientConnections', 'UnsetParentGroupFromChannels', 'RetrieveEntity', 'RetrieveIDByRoute'];
get_rpc_names(_) -> error.


find_rpc_def('channels.v1.ChannelsService', RpcName) -> 'find_rpc_def_channels.v1.ChannelsService'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_channels.v1.ChannelsService'('Authorize') -> #{name => 'Authorize', input => authz_req, output => authz_res, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_channels.v1.ChannelsService'('RemoveClientConnections') -> #{name => 'RemoveClientConnections', input => remove_client_connections_req, output => remove_client_connections_res, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_channels.v1.ChannelsService'('UnsetParentGroupFromChannels') ->
    #{name => 'UnsetParentGroupFromChannels', input => unset_parent_group_from_channels_req, output => unset_parent_group_from_channels_res, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_channels.v1.ChannelsService'('RetrieveEntity') -> #{name => 'RetrieveEntity', input => retrieve_entity_req, output => retrieve_entity_res, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_channels.v1.ChannelsService'('RetrieveIDByRoute') -> #{name => 'RetrieveIDByRoute', input => retrieve_id_by_route_req, output => retrieve_entity_res, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_channels.v1.ChannelsService'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"channels.v1.ChannelsService">>) -> 'channels.v1.ChannelsService';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('channels.v1.ChannelsService') -> <<"channels.v1.ChannelsService">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"channels.v1.ChannelsService">>, <<"Authorize">>) -> {'channels.v1.ChannelsService', 'Authorize'};
fqbins_to_service_and_rpc_name(<<"channels.v1.ChannelsService">>, <<"RemoveClientConnections">>) -> {'channels.v1.ChannelsService', 'RemoveClientConnections'};
fqbins_to_service_and_rpc_name(<<"channels.v1.ChannelsService">>, <<"UnsetParentGroupFromChannels">>) -> {'channels.v1.ChannelsService', 'UnsetParentGroupFromChannels'};
fqbins_to_service_and_rpc_name(<<"channels.v1.ChannelsService">>, <<"RetrieveEntity">>) -> {'channels.v1.ChannelsService', 'RetrieveEntity'};
fqbins_to_service_and_rpc_name(<<"channels.v1.ChannelsService">>, <<"RetrieveIDByRoute">>) -> {'channels.v1.ChannelsService', 'RetrieveIDByRoute'};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('channels.v1.ChannelsService', 'Authorize') -> {<<"channels.v1.ChannelsService">>, <<"Authorize">>};
service_and_rpc_name_to_fqbins('channels.v1.ChannelsService', 'RemoveClientConnections') -> {<<"channels.v1.ChannelsService">>, <<"RemoveClientConnections">>};
service_and_rpc_name_to_fqbins('channels.v1.ChannelsService', 'UnsetParentGroupFromChannels') -> {<<"channels.v1.ChannelsService">>, <<"UnsetParentGroupFromChannels">>};
service_and_rpc_name_to_fqbins('channels.v1.ChannelsService', 'RetrieveEntity') -> {<<"channels.v1.ChannelsService">>, <<"RetrieveEntity">>};
service_and_rpc_name_to_fqbins('channels.v1.ChannelsService', 'RetrieveIDByRoute') -> {<<"channels.v1.ChannelsService">>, <<"RetrieveIDByRoute">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"channels.v1.RemoveClientConnectionsReq">>) -> remove_client_connections_req;
fqbin_to_msg_name(<<"channels.v1.RemoveClientConnectionsRes">>) -> remove_client_connections_res;
fqbin_to_msg_name(<<"channels.v1.UnsetParentGroupFromChannelsReq">>) -> unset_parent_group_from_channels_req;
fqbin_to_msg_name(<<"channels.v1.UnsetParentGroupFromChannelsRes">>) -> unset_parent_group_from_channels_res;
fqbin_to_msg_name(<<"channels.v1.AuthzReq">>) -> authz_req;
fqbin_to_msg_name(<<"channels.v1.AuthzRes">>) -> authz_res;
fqbin_to_msg_name(<<"common.v1.RetrieveEntitiesReq">>) -> retrieve_entities_req;
fqbin_to_msg_name(<<"common.v1.RetrieveEntitiesRes">>) -> retrieve_entities_res;
fqbin_to_msg_name(<<"common.v1.RetrieveEntityReq">>) -> retrieve_entity_req;
fqbin_to_msg_name(<<"common.v1.RetrieveEntityRes">>) -> retrieve_entity_res;
fqbin_to_msg_name(<<"common.v1.EntityBasic">>) -> entity_basic;
fqbin_to_msg_name(<<"common.v1.AddConnectionsReq">>) -> add_connections_req;
fqbin_to_msg_name(<<"common.v1.AddConnectionsRes">>) -> add_connections_res;
fqbin_to_msg_name(<<"common.v1.RemoveConnectionsReq">>) -> remove_connections_req;
fqbin_to_msg_name(<<"common.v1.RemoveConnectionsRes">>) -> remove_connections_res;
fqbin_to_msg_name(<<"common.v1.Connection">>) -> connection;
fqbin_to_msg_name(<<"common.v1.RetrieveIDByRouteReq">>) -> retrieve_id_by_route_req;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(remove_client_connections_req) -> <<"channels.v1.RemoveClientConnectionsReq">>;
msg_name_to_fqbin(remove_client_connections_res) -> <<"channels.v1.RemoveClientConnectionsRes">>;
msg_name_to_fqbin(unset_parent_group_from_channels_req) -> <<"channels.v1.UnsetParentGroupFromChannelsReq">>;
msg_name_to_fqbin(unset_parent_group_from_channels_res) -> <<"channels.v1.UnsetParentGroupFromChannelsRes">>;
msg_name_to_fqbin(authz_req) -> <<"channels.v1.AuthzReq">>;
msg_name_to_fqbin(authz_res) -> <<"channels.v1.AuthzRes">>;
msg_name_to_fqbin(retrieve_entities_req) -> <<"common.v1.RetrieveEntitiesReq">>;
msg_name_to_fqbin(retrieve_entities_res) -> <<"common.v1.RetrieveEntitiesRes">>;
msg_name_to_fqbin(retrieve_entity_req) -> <<"common.v1.RetrieveEntityReq">>;
msg_name_to_fqbin(retrieve_entity_res) -> <<"common.v1.RetrieveEntityRes">>;
msg_name_to_fqbin(entity_basic) -> <<"common.v1.EntityBasic">>;
msg_name_to_fqbin(add_connections_req) -> <<"common.v1.AddConnectionsReq">>;
msg_name_to_fqbin(add_connections_res) -> <<"common.v1.AddConnectionsRes">>;
msg_name_to_fqbin(remove_connections_req) -> <<"common.v1.RemoveConnectionsReq">>;
msg_name_to_fqbin(remove_connections_res) -> <<"common.v1.RemoveConnectionsRes">>;
msg_name_to_fqbin(connection) -> <<"common.v1.Connection">>;
msg_name_to_fqbin(retrieve_id_by_route_req) -> <<"common.v1.RetrieveIDByRouteReq">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'channels.v1'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "channels.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["channels.proto", "common.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["channels", "common"].


get_msg_containment("channels") -> [authz_req, authz_res, remove_client_connections_req, remove_client_connections_res, unset_parent_group_from_channels_req, unset_parent_group_from_channels_res];
get_msg_containment("common") ->
    [add_connections_req, add_connections_res, connection, entity_basic, remove_connections_req, remove_connections_res, retrieve_entities_req, retrieve_entities_res, retrieve_entity_req, retrieve_entity_res, retrieve_id_by_route_req];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("channels") -> 'channels.v1';
get_pkg_containment("common") -> 'common.v1';
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("channels") -> ['channels.v1.ChannelsService'];
get_service_containment("common") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("channels") ->
    [{'channels.v1.ChannelsService', 'Authorize'},
     {'channels.v1.ChannelsService', 'RemoveClientConnections'},
     {'channels.v1.ChannelsService', 'UnsetParentGroupFromChannels'},
     {'channels.v1.ChannelsService', 'RetrieveEntity'},
     {'channels.v1.ChannelsService', 'RetrieveIDByRoute'}];
get_rpc_containment("common") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("channels") -> [];
get_enum_containment("common") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"common.v1.RetrieveIDByRouteReq">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"common.v1.RetrieveEntityReq">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"common.v1.RetrieveEntitiesReq">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"common.v1.RemoveConnectionsReq">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"common.v1.AddConnectionsReq">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"channels.v1.UnsetParentGroupFromChannelsReq">>) -> "channels";
get_proto_by_msg_name_as_fqbin(<<"channels.v1.RemoveClientConnectionsReq">>) -> "channels";
get_proto_by_msg_name_as_fqbin(<<"channels.v1.AuthzReq">>) -> "channels";
get_proto_by_msg_name_as_fqbin(<<"common.v1.RetrieveEntityRes">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"common.v1.RetrieveEntitiesRes">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"common.v1.RemoveConnectionsRes">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"common.v1.EntityBasic">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"common.v1.AddConnectionsRes">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"channels.v1.UnsetParentGroupFromChannelsRes">>) -> "channels";
get_proto_by_msg_name_as_fqbin(<<"channels.v1.RemoveClientConnectionsRes">>) -> "channels";
get_proto_by_msg_name_as_fqbin(<<"channels.v1.AuthzRes">>) -> "channels";
get_proto_by_msg_name_as_fqbin(<<"common.v1.Connection">>) -> "common";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"channels.v1.ChannelsService">>) -> "channels";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"common.v1">>) -> ["common"];
get_protos_by_pkg_name_as_fqbin(<<"channels.v1">>) -> ["channels"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.21.1".

gpb_version_as_list() ->
    [4,21,1].

gpb_version_source() ->
    "file".
