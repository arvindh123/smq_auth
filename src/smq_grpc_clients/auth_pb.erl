%% -*- coding: utf-8 -*-
%% % this file is @generated
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.21.1
%% Version source: file
-module(auth_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).


%% enumerated types

-export_type([]).

%% message types
-type auth_n_req() ::
      #{token                   => unicode:chardata() % = 1, optional
       }.

-type auth_n_res() ::
      #{id                      => unicode:chardata(), % = 1, optional
        user_id                 => unicode:chardata(), % = 2, optional
        user_role               => non_neg_integer(), % = 3, optional, 32 bits
        verified                => boolean() | 0 | 1 % = 4, optional
       }.

-type auth_z_req() ::
      #{domain                  => unicode:chardata(), % = 1, optional
        subject_type            => unicode:chardata(), % = 2, optional
        subject_kind            => unicode:chardata(), % = 3, optional
        subject_relation        => unicode:chardata(), % = 4, optional
        subject                 => unicode:chardata(), % = 5, optional
        relation                => unicode:chardata(), % = 6, optional
        permission              => unicode:chardata(), % = 7, optional
        object                  => unicode:chardata(), % = 8, optional
        object_type             => unicode:chardata() % = 9, optional
       }.

-type auth_z_pat_req() ::
      #{user_id                 => unicode:chardata(), % = 1, optional
        pat_id                  => unicode:chardata(), % = 2, optional
        entity_type             => non_neg_integer(), % = 3, optional, 32 bits
        optional_domain_id      => unicode:chardata(), % = 4, optional
        operation               => non_neg_integer(), % = 6, optional, 32 bits
        entity_id               => unicode:chardata() % = 7, optional
       }.

-type auth_z_res() ::
      #{authorized              => boolean() | 0 | 1, % = 1, optional
        id                      => unicode:chardata() % = 2, optional
       }.

-export_type(['auth_n_req'/0, 'auth_n_res'/0, 'auth_z_req'/0, 'auth_z_pat_req'/0, 'auth_z_res'/0]).
-type '$msg_name'() :: auth_n_req | auth_n_res | auth_z_req | auth_z_pat_req | auth_z_res.
-type '$msg'() :: auth_n_req() | auth_n_res() | auth_z_req() | auth_z_pat_req() | auth_z_res().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        auth_n_req -> encode_msg_auth_n_req(id(Msg, TrUserData), TrUserData);
        auth_n_res -> encode_msg_auth_n_res(id(Msg, TrUserData), TrUserData);
        auth_z_req -> encode_msg_auth_z_req(id(Msg, TrUserData), TrUserData);
        auth_z_pat_req -> encode_msg_auth_z_pat_req(id(Msg, TrUserData), TrUserData);
        auth_z_res -> encode_msg_auth_z_res(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_auth_n_req(Msg, TrUserData) -> encode_msg_auth_n_req(Msg, <<>>, TrUserData).


encode_msg_auth_n_req(#{} = M, Bin, TrUserData) ->
    case M of
        #{token := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_auth_n_res(Msg, TrUserData) -> encode_msg_auth_n_res(Msg, <<>>, TrUserData).


encode_msg_auth_n_res(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{user_id := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{user_role := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{verified := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                if TrF4 =:= false -> B3;
                   true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_auth_z_req(Msg, TrUserData) -> encode_msg_auth_z_req(Msg, <<>>, TrUserData).


encode_msg_auth_z_req(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{domain := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{subject_type := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{subject_kind := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{subject_relation := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case is_empty_string(TrF4) of
                         true -> B3;
                         false -> e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{subject := F5} ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     case is_empty_string(TrF5) of
                         true -> B4;
                         false -> e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
                     end
                 end;
             _ -> B4
         end,
    B6 = case M of
             #{relation := F6} ->
                 begin
                     TrF6 = id(F6, TrUserData),
                     case is_empty_string(TrF6) of
                         true -> B5;
                         false -> e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
                     end
                 end;
             _ -> B5
         end,
    B7 = case M of
             #{permission := F7} ->
                 begin
                     TrF7 = id(F7, TrUserData),
                     case is_empty_string(TrF7) of
                         true -> B6;
                         false -> e_type_string(TrF7, <<B6/binary, 58>>, TrUserData)
                     end
                 end;
             _ -> B6
         end,
    B8 = case M of
             #{object := F8} ->
                 begin
                     TrF8 = id(F8, TrUserData),
                     case is_empty_string(TrF8) of
                         true -> B7;
                         false -> e_type_string(TrF8, <<B7/binary, 66>>, TrUserData)
                     end
                 end;
             _ -> B7
         end,
    case M of
        #{object_type := F9} ->
            begin
                TrF9 = id(F9, TrUserData),
                case is_empty_string(TrF9) of
                    true -> B8;
                    false -> e_type_string(TrF9, <<B8/binary, 74>>, TrUserData)
                end
            end;
        _ -> B8
    end.

encode_msg_auth_z_pat_req(Msg, TrUserData) -> encode_msg_auth_z_pat_req(Msg, <<>>, TrUserData).


encode_msg_auth_z_pat_req(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{user_id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{pat_id := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{entity_type := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{optional_domain_id := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case is_empty_string(TrF4) of
                         true -> B3;
                         false -> e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{operation := F5} ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     if TrF5 =:= 0 -> B4;
                        true -> e_varint(TrF5, <<B4/binary, 48>>, TrUserData)
                     end
                 end;
             _ -> B4
         end,
    case M of
        #{entity_id := F6} ->
            begin
                TrF6 = id(F6, TrUserData),
                case is_empty_string(TrF6) of
                    true -> B5;
                    false -> e_type_string(TrF6, <<B5/binary, 58>>, TrUserData)
                end
            end;
        _ -> B5
    end.

encode_msg_auth_z_res(Msg, TrUserData) -> encode_msg_auth_z_res(Msg, <<>>, TrUserData).


encode_msg_auth_z_res(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{authorized := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= false -> Bin;
                        true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{id := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(auth_n_req, Bin, TrUserData) -> id(decode_msg_auth_n_req(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_n_res, Bin, TrUserData) -> id(decode_msg_auth_n_res(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_z_req, Bin, TrUserData) -> id(decode_msg_auth_z_req(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_z_pat_req, Bin, TrUserData) -> id(decode_msg_auth_z_pat_req(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_z_res, Bin, TrUserData) -> id(decode_msg_auth_z_res(Bin, TrUserData), TrUserData).



decode_msg_auth_n_req(Bin, TrUserData) -> dfp_read_field_def_auth_n_req(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_auth_n_req(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_auth_n_req_token(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_auth_n_req(<<>>, 0, 0, _, F@_1, _) -> #{token => F@_1};
dfp_read_field_def_auth_n_req(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_auth_n_req(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_auth_n_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_n_req(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_auth_n_req(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_auth_n_req_token(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_auth_n_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_auth_n_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_auth_n_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_auth_n_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_auth_n_req(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_auth_n_req(<<>>, 0, 0, _, F@_1, _) -> #{token => F@_1}.

d_field_auth_n_req_token(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_auth_n_req_token(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_auth_n_req_token(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_n_req(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_auth_n_req(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_auth_n_req(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_auth_n_req(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_n_req(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_auth_n_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_auth_n_req(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_auth_n_req(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_n_req(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_auth_n_req(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_n_req(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_auth_n_req(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_n_req(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_auth_n_req(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_n_req(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_auth_n_res(Bin, TrUserData) -> dfp_read_field_def_auth_n_res(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), id(false, TrUserData), TrUserData).

dfp_read_field_def_auth_n_res(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_auth_n_res_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_auth_n_res(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_auth_n_res_user_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_auth_n_res(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_auth_n_res_user_role(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_auth_n_res(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_auth_n_res_verified(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_auth_n_res(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{id => F@_1, user_id => F@_2, user_role => F@_3, verified => F@_4};
dfp_read_field_def_auth_n_res(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_auth_n_res(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_auth_n_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_n_res(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_auth_n_res(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_auth_n_res_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_auth_n_res_user_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> d_field_auth_n_res_user_role(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_auth_n_res_verified(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_auth_n_res(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_auth_n_res(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_auth_n_res(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_auth_n_res(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_auth_n_res(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_auth_n_res(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{id => F@_1, user_id => F@_2, user_role => F@_3, verified => F@_4}.

d_field_auth_n_res_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_auth_n_res_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_auth_n_res_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_n_res(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_auth_n_res_user_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_auth_n_res_user_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_auth_n_res_user_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_n_res(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_auth_n_res_user_role(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_auth_n_res_user_role(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_auth_n_res_user_role(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_auth_n_res(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_auth_n_res_verified(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_auth_n_res_verified(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_auth_n_res_verified(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_auth_n_res(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_auth_n_res(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_auth_n_res(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_auth_n_res(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_auth_n_res(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_auth_n_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_auth_n_res(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_auth_n_res(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_n_res(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_auth_n_res(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_n_res(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_auth_n_res(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_auth_n_res(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_auth_n_res(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_auth_n_res(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_auth_z_req(Bin, TrUserData) ->
    dfp_read_field_def_auth_z_req(Bin,
                                  0,
                                  0,
                                  0,
                                  id(<<>>, TrUserData),
                                  id(<<>>, TrUserData),
                                  id(<<>>, TrUserData),
                                  id(<<>>, TrUserData),
                                  id(<<>>, TrUserData),
                                  id(<<>>, TrUserData),
                                  id(<<>>, TrUserData),
                                  id(<<>>, TrUserData),
                                  id(<<>>, TrUserData),
                                  TrUserData).

dfp_read_field_def_auth_z_req(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_auth_z_req_domain(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_auth_z_req(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_auth_z_req_subject_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_auth_z_req(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_auth_z_req_subject_kind(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_auth_z_req(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_auth_z_req_subject_relation(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_auth_z_req(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_auth_z_req_subject(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_auth_z_req(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_auth_z_req_relation(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_auth_z_req(<<58, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_auth_z_req_permission(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_auth_z_req(<<66, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_auth_z_req_object(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_auth_z_req(<<74, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> d_field_auth_z_req_object_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_auth_z_req(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _) ->
    #{domain => F@_1, subject_type => F@_2, subject_kind => F@_3, subject_relation => F@_4, subject => F@_5, relation => F@_6, permission => F@_7, object => F@_8, object_type => F@_9};
dfp_read_field_def_auth_z_req(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> dg_read_field_def_auth_z_req(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

dg_read_field_def_auth_z_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_auth_z_req(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dg_read_field_def_auth_z_req(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_auth_z_req_domain(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        18 -> d_field_auth_z_req_subject_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        26 -> d_field_auth_z_req_subject_kind(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        34 -> d_field_auth_z_req_subject_relation(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        42 -> d_field_auth_z_req_subject(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        50 -> d_field_auth_z_req_relation(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        58 -> d_field_auth_z_req_permission(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        66 -> d_field_auth_z_req_object(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        74 -> d_field_auth_z_req_object_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_auth_z_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
                1 -> skip_64_auth_z_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
                2 -> skip_length_delimited_auth_z_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
                3 -> skip_group_auth_z_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
                5 -> skip_32_auth_z_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData)
            end
    end;
dg_read_field_def_auth_z_req(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _) ->
    #{domain => F@_1, subject_type => F@_2, subject_kind => F@_3, subject_relation => F@_4, subject => F@_5, relation => F@_6, permission => F@_7, object => F@_8, object_type => F@_9}.

d_field_auth_z_req_domain(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_auth_z_req_domain(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_auth_z_req_domain(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_z_req(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_auth_z_req_subject_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_auth_z_req_subject_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_auth_z_req_subject_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_z_req(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_auth_z_req_subject_kind(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_auth_z_req_subject_kind(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_auth_z_req_subject_kind(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_z_req(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_auth_z_req_subject_relation(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_auth_z_req_subject_relation(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_auth_z_req_subject_relation(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_z_req(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_auth_z_req_subject(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_auth_z_req_subject(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_auth_z_req_subject(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_z_req(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_auth_z_req_relation(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_auth_z_req_relation(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_auth_z_req_relation(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_z_req(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, TrUserData).

d_field_auth_z_req_permission(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_auth_z_req_permission(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_auth_z_req_permission(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_z_req(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, TrUserData).

d_field_auth_z_req_object(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_auth_z_req_object(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_auth_z_req_object(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_z_req(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, TrUserData).

d_field_auth_z_req_object_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    d_field_auth_z_req_object_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_auth_z_req_object_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_z_req(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, TrUserData).

skip_varint_auth_z_req(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> skip_varint_auth_z_req(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
skip_varint_auth_z_req(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> dfp_read_field_def_auth_z_req(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

skip_length_delimited_auth_z_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) when N < 57 ->
    skip_length_delimited_auth_z_req(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
skip_length_delimited_auth_z_req(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_z_req(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

skip_group_auth_z_req(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_z_req(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

skip_32_auth_z_req(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> dfp_read_field_def_auth_z_req(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

skip_64_auth_z_req(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) -> dfp_read_field_def_auth_z_req(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

decode_msg_auth_z_pat_req(Bin, TrUserData) -> dfp_read_field_def_auth_z_pat_req(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_auth_z_pat_req(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_auth_z_pat_req_user_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_auth_z_pat_req(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_auth_z_pat_req_pat_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_auth_z_pat_req(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_auth_z_pat_req_entity_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_auth_z_pat_req(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_auth_z_pat_req_optional_domain_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_auth_z_pat_req(<<48, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_auth_z_pat_req_operation(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_auth_z_pat_req(<<58, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_auth_z_pat_req_entity_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_auth_z_pat_req(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) -> #{user_id => F@_1, pat_id => F@_2, entity_type => F@_3, optional_domain_id => F@_4, operation => F@_5, entity_id => F@_6};
dfp_read_field_def_auth_z_pat_req(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dg_read_field_def_auth_z_pat_req(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_auth_z_pat_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_z_pat_req(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_auth_z_pat_req(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_auth_z_pat_req_user_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        18 -> d_field_auth_z_pat_req_pat_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        24 -> d_field_auth_z_pat_req_entity_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        34 -> d_field_auth_z_pat_req_optional_domain_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        48 -> d_field_auth_z_pat_req_operation(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        58 -> d_field_auth_z_pat_req_entity_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_auth_z_pat_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                1 -> skip_64_auth_z_pat_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                2 -> skip_length_delimited_auth_z_pat_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                3 -> skip_group_auth_z_pat_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                5 -> skip_32_auth_z_pat_req(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
            end
    end;
dg_read_field_def_auth_z_pat_req(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) -> #{user_id => F@_1, pat_id => F@_2, entity_type => F@_3, optional_domain_id => F@_4, operation => F@_5, entity_id => F@_6}.

d_field_auth_z_pat_req_user_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_auth_z_pat_req_user_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_auth_z_pat_req_user_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_z_pat_req(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_auth_z_pat_req_pat_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_auth_z_pat_req_pat_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_auth_z_pat_req_pat_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_z_pat_req(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_auth_z_pat_req_entity_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_auth_z_pat_req_entity_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_auth_z_pat_req_entity_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_auth_z_pat_req(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_auth_z_pat_req_optional_domain_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_auth_z_pat_req_optional_domain_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_auth_z_pat_req_optional_domain_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_z_pat_req(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_auth_z_pat_req_operation(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_auth_z_pat_req_operation(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_auth_z_pat_req_operation(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_auth_z_pat_req(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_auth_z_pat_req_entity_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_auth_z_pat_req_entity_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_auth_z_pat_req_entity_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_z_pat_req(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_auth_z_pat_req(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> skip_varint_auth_z_pat_req(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_auth_z_pat_req(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_auth_z_pat_req(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_auth_z_pat_req(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    skip_length_delimited_auth_z_pat_req(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_auth_z_pat_req(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_z_pat_req(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_auth_z_pat_req(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_z_pat_req(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_auth_z_pat_req(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_auth_z_pat_req(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_auth_z_pat_req(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_auth_z_pat_req(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_auth_z_res(Bin, TrUserData) -> dfp_read_field_def_auth_z_res(Bin, 0, 0, 0, id(false, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_auth_z_res(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_auth_z_res_authorized(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_auth_z_res(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_auth_z_res_id(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_auth_z_res(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{authorized => F@_1, id => F@_2};
dfp_read_field_def_auth_z_res(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_auth_z_res(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_auth_z_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_z_res(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_auth_z_res(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_auth_z_res_authorized(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_auth_z_res_id(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_auth_z_res(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_auth_z_res(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_auth_z_res(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_auth_z_res(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_auth_z_res(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_auth_z_res(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{authorized => F@_1, id => F@_2}.

d_field_auth_z_res_authorized(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_auth_z_res_authorized(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_auth_z_res_authorized(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_auth_z_res(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_auth_z_res_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_auth_z_res_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_auth_z_res_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_z_res(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_auth_z_res(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_auth_z_res(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_auth_z_res(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_auth_z_res(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_auth_z_res(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_auth_z_res(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_auth_z_res(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_z_res(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_auth_z_res(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_z_res(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_auth_z_res(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_auth_z_res(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_auth_z_res(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_auth_z_res(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        auth_n_req -> merge_msg_auth_n_req(Prev, New, TrUserData);
        auth_n_res -> merge_msg_auth_n_res(Prev, New, TrUserData);
        auth_z_req -> merge_msg_auth_z_req(Prev, New, TrUserData);
        auth_z_pat_req -> merge_msg_auth_z_pat_req(Prev, New, TrUserData);
        auth_z_res -> merge_msg_auth_z_res(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_auth_n_req/3}).
merge_msg_auth_n_req(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{token := NFtoken}} -> S1#{token => NFtoken};
        {#{token := PFtoken}, _} -> S1#{token => PFtoken};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_auth_n_res/3}).
merge_msg_auth_n_res(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{id := NFid}} -> S1#{id => NFid};
             {#{id := PFid}, _} -> S1#{id => PFid};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{user_id := NFuser_id}} -> S2#{user_id => NFuser_id};
             {#{user_id := PFuser_id}, _} -> S2#{user_id => PFuser_id};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{user_role := NFuser_role}} -> S3#{user_role => NFuser_role};
             {#{user_role := PFuser_role}, _} -> S3#{user_role => PFuser_role};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{verified := NFverified}} -> S4#{verified => NFverified};
        {#{verified := PFverified}, _} -> S4#{verified => PFverified};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_auth_z_req/3}).
merge_msg_auth_z_req(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{domain := NFdomain}} -> S1#{domain => NFdomain};
             {#{domain := PFdomain}, _} -> S1#{domain => PFdomain};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{subject_type := NFsubject_type}} -> S2#{subject_type => NFsubject_type};
             {#{subject_type := PFsubject_type}, _} -> S2#{subject_type => PFsubject_type};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{subject_kind := NFsubject_kind}} -> S3#{subject_kind => NFsubject_kind};
             {#{subject_kind := PFsubject_kind}, _} -> S3#{subject_kind => PFsubject_kind};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{subject_relation := NFsubject_relation}} -> S4#{subject_relation => NFsubject_relation};
             {#{subject_relation := PFsubject_relation}, _} -> S4#{subject_relation => PFsubject_relation};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{subject := NFsubject}} -> S5#{subject => NFsubject};
             {#{subject := PFsubject}, _} -> S5#{subject => PFsubject};
             _ -> S5
         end,
    S7 = case {PMsg, NMsg} of
             {_, #{relation := NFrelation}} -> S6#{relation => NFrelation};
             {#{relation := PFrelation}, _} -> S6#{relation => PFrelation};
             _ -> S6
         end,
    S8 = case {PMsg, NMsg} of
             {_, #{permission := NFpermission}} -> S7#{permission => NFpermission};
             {#{permission := PFpermission}, _} -> S7#{permission => PFpermission};
             _ -> S7
         end,
    S9 = case {PMsg, NMsg} of
             {_, #{object := NFobject}} -> S8#{object => NFobject};
             {#{object := PFobject}, _} -> S8#{object => PFobject};
             _ -> S8
         end,
    case {PMsg, NMsg} of
        {_, #{object_type := NFobject_type}} -> S9#{object_type => NFobject_type};
        {#{object_type := PFobject_type}, _} -> S9#{object_type => PFobject_type};
        _ -> S9
    end.

-compile({nowarn_unused_function,merge_msg_auth_z_pat_req/3}).
merge_msg_auth_z_pat_req(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{user_id := NFuser_id}} -> S1#{user_id => NFuser_id};
             {#{user_id := PFuser_id}, _} -> S1#{user_id => PFuser_id};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{pat_id := NFpat_id}} -> S2#{pat_id => NFpat_id};
             {#{pat_id := PFpat_id}, _} -> S2#{pat_id => PFpat_id};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{entity_type := NFentity_type}} -> S3#{entity_type => NFentity_type};
             {#{entity_type := PFentity_type}, _} -> S3#{entity_type => PFentity_type};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{optional_domain_id := NFoptional_domain_id}} -> S4#{optional_domain_id => NFoptional_domain_id};
             {#{optional_domain_id := PFoptional_domain_id}, _} -> S4#{optional_domain_id => PFoptional_domain_id};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{operation := NFoperation}} -> S5#{operation => NFoperation};
             {#{operation := PFoperation}, _} -> S5#{operation => PFoperation};
             _ -> S5
         end,
    case {PMsg, NMsg} of
        {_, #{entity_id := NFentity_id}} -> S6#{entity_id => NFentity_id};
        {#{entity_id := PFentity_id}, _} -> S6#{entity_id => PFentity_id};
        _ -> S6
    end.

-compile({nowarn_unused_function,merge_msg_auth_z_res/3}).
merge_msg_auth_z_res(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{authorized := NFauthorized}} -> S1#{authorized => NFauthorized};
             {#{authorized := PFauthorized}, _} -> S1#{authorized => PFauthorized};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{id := NFid}} -> S2#{id => NFid};
        {#{id := PFid}, _} -> S2#{id => PFid};
        _ -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        auth_n_req -> v_msg_auth_n_req(Msg, [MsgName], TrUserData);
        auth_n_res -> v_msg_auth_n_res(Msg, [MsgName], TrUserData);
        auth_z_req -> v_msg_auth_z_req(Msg, [MsgName], TrUserData);
        auth_z_pat_req -> v_msg_auth_z_pat_req(Msg, [MsgName], TrUserData);
        auth_z_res -> v_msg_auth_z_res(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_auth_n_req/3}).
-dialyzer({nowarn_function,v_msg_auth_n_req/3}).
v_msg_auth_n_req(#{} = M, Path, TrUserData) ->
    case M of
        #{token := F1} -> v_type_string(F1, [token | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (token) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_auth_n_req(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), auth_n_req}, M, Path);
v_msg_auth_n_req(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_n_req}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_n_res/3}).
-dialyzer({nowarn_function,v_msg_auth_n_res/3}).
v_msg_auth_n_res(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} -> v_type_string(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{user_id := F2} -> v_type_string(F2, [user_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{user_role := F3} -> v_type_uint32(F3, [user_role | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{verified := F4} -> v_type_bool(F4, [verified | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (user_id) -> ok;
                      (user_role) -> ok;
                      (verified) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_auth_n_res(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), auth_n_res}, M, Path);
v_msg_auth_n_res(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_n_res}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_z_req/3}).
-dialyzer({nowarn_function,v_msg_auth_z_req/3}).
v_msg_auth_z_req(#{} = M, Path, TrUserData) ->
    case M of
        #{domain := F1} -> v_type_string(F1, [domain | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{subject_type := F2} -> v_type_string(F2, [subject_type | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{subject_kind := F3} -> v_type_string(F3, [subject_kind | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{subject_relation := F4} -> v_type_string(F4, [subject_relation | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{subject := F5} -> v_type_string(F5, [subject | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{relation := F6} -> v_type_string(F6, [relation | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{permission := F7} -> v_type_string(F7, [permission | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{object := F8} -> v_type_string(F8, [object | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{object_type := F9} -> v_type_string(F9, [object_type | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (domain) -> ok;
                      (subject_type) -> ok;
                      (subject_kind) -> ok;
                      (subject_relation) -> ok;
                      (subject) -> ok;
                      (relation) -> ok;
                      (permission) -> ok;
                      (object) -> ok;
                      (object_type) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_auth_z_req(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), auth_z_req}, M, Path);
v_msg_auth_z_req(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_z_req}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_z_pat_req/3}).
-dialyzer({nowarn_function,v_msg_auth_z_pat_req/3}).
v_msg_auth_z_pat_req(#{} = M, Path, TrUserData) ->
    case M of
        #{user_id := F1} -> v_type_string(F1, [user_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{pat_id := F2} -> v_type_string(F2, [pat_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{entity_type := F3} -> v_type_uint32(F3, [entity_type | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{optional_domain_id := F4} -> v_type_string(F4, [optional_domain_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{operation := F5} -> v_type_uint32(F5, [operation | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{entity_id := F6} -> v_type_string(F6, [entity_id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (user_id) -> ok;
                      (pat_id) -> ok;
                      (entity_type) -> ok;
                      (optional_domain_id) -> ok;
                      (operation) -> ok;
                      (entity_id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_auth_z_pat_req(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), auth_z_pat_req}, M, Path);
v_msg_auth_z_pat_req(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_z_pat_req}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_z_res/3}).
-dialyzer({nowarn_function,v_msg_auth_z_res/3}).
v_msg_auth_z_res(#{} = M, Path, TrUserData) ->
    case M of
        #{authorized := F1} -> v_type_bool(F1, [authorized | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{id := F2} -> v_type_string(F2, [id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (authorized) -> ok;
                      (id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_auth_z_res(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), auth_z_res}, M, Path);
v_msg_auth_z_res(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_z_res}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when is_integer(N), 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, auth_n_req}, [#{name => token, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}]},
     {{msg, auth_n_res},
      [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => user_id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => user_role, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
       #{name => verified, fnum => 4, rnum => 5, type => bool, occurrence => optional, opts => []}]},
     {{msg, auth_z_req},
      [#{name => domain, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => subject_type, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => subject_kind, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []},
       #{name => subject_relation, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []},
       #{name => subject, fnum => 5, rnum => 6, type => string, occurrence => optional, opts => []},
       #{name => relation, fnum => 6, rnum => 7, type => string, occurrence => optional, opts => []},
       #{name => permission, fnum => 7, rnum => 8, type => string, occurrence => optional, opts => []},
       #{name => object, fnum => 8, rnum => 9, type => string, occurrence => optional, opts => []},
       #{name => object_type, fnum => 9, rnum => 10, type => string, occurrence => optional, opts => []}]},
     {{msg, auth_z_pat_req},
      [#{name => user_id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => pat_id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => entity_type, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
       #{name => optional_domain_id, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []},
       #{name => operation, fnum => 6, rnum => 6, type => uint32, occurrence => optional, opts => []},
       #{name => entity_id, fnum => 7, rnum => 7, type => string, occurrence => optional, opts => []}]},
     {{msg, auth_z_res}, [#{name => authorized, fnum => 1, rnum => 2, type => bool, occurrence => optional, opts => []}, #{name => id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}]}].


get_msg_names() -> [auth_n_req, auth_n_res, auth_z_req, auth_z_pat_req, auth_z_res].


get_group_names() -> [].


get_msg_or_group_names() -> [auth_n_req, auth_n_res, auth_z_req, auth_z_pat_req, auth_z_res].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).


find_msg_def(auth_n_req) -> [#{name => token, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}];
find_msg_def(auth_n_res) ->
    [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => user_id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => user_role, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
     #{name => verified, fnum => 4, rnum => 5, type => bool, occurrence => optional, opts => []}];
find_msg_def(auth_z_req) ->
    [#{name => domain, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => subject_type, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => subject_kind, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []},
     #{name => subject_relation, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []},
     #{name => subject, fnum => 5, rnum => 6, type => string, occurrence => optional, opts => []},
     #{name => relation, fnum => 6, rnum => 7, type => string, occurrence => optional, opts => []},
     #{name => permission, fnum => 7, rnum => 8, type => string, occurrence => optional, opts => []},
     #{name => object, fnum => 8, rnum => 9, type => string, occurrence => optional, opts => []},
     #{name => object_type, fnum => 9, rnum => 10, type => string, occurrence => optional, opts => []}];
find_msg_def(auth_z_pat_req) ->
    [#{name => user_id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => pat_id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => entity_type, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
     #{name => optional_domain_id, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []},
     #{name => operation, fnum => 6, rnum => 6, type => uint32, occurrence => optional, opts => []},
     #{name => entity_id, fnum => 7, rnum => 7, type => string, occurrence => optional, opts => []}];
find_msg_def(auth_z_res) -> [#{name => authorized, fnum => 1, rnum => 2, type => bool, occurrence => optional, opts => []}, #{name => id, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['auth.v1.AuthService'].


get_service_def('auth.v1.AuthService') ->
    {{service, 'auth.v1.AuthService'},
     [#{name => 'Authorize', input => auth_z_req, output => auth_z_res, input_stream => false, output_stream => false, opts => []},
      #{name => 'AuthorizePAT', input => auth_z_pat_req, output => auth_z_res, input_stream => false, output_stream => false, opts => []},
      #{name => 'Authenticate', input => auth_n_req, output => auth_n_res, input_stream => false, output_stream => false, opts => []},
      #{name => 'AuthenticatePAT', input => auth_n_req, output => auth_n_res, input_stream => false, output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('auth.v1.AuthService') -> ['Authorize', 'AuthorizePAT', 'Authenticate', 'AuthenticatePAT'];
get_rpc_names(_) -> error.


find_rpc_def('auth.v1.AuthService', RpcName) -> 'find_rpc_def_auth.v1.AuthService'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_auth.v1.AuthService'('Authorize') -> #{name => 'Authorize', input => auth_z_req, output => auth_z_res, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_auth.v1.AuthService'('AuthorizePAT') -> #{name => 'AuthorizePAT', input => auth_z_pat_req, output => auth_z_res, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_auth.v1.AuthService'('Authenticate') -> #{name => 'Authenticate', input => auth_n_req, output => auth_n_res, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_auth.v1.AuthService'('AuthenticatePAT') -> #{name => 'AuthenticatePAT', input => auth_n_req, output => auth_n_res, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_auth.v1.AuthService'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"auth.v1.AuthService">>) -> 'auth.v1.AuthService';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('auth.v1.AuthService') -> <<"auth.v1.AuthService">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"auth.v1.AuthService">>, <<"Authorize">>) -> {'auth.v1.AuthService', 'Authorize'};
fqbins_to_service_and_rpc_name(<<"auth.v1.AuthService">>, <<"AuthorizePAT">>) -> {'auth.v1.AuthService', 'AuthorizePAT'};
fqbins_to_service_and_rpc_name(<<"auth.v1.AuthService">>, <<"Authenticate">>) -> {'auth.v1.AuthService', 'Authenticate'};
fqbins_to_service_and_rpc_name(<<"auth.v1.AuthService">>, <<"AuthenticatePAT">>) -> {'auth.v1.AuthService', 'AuthenticatePAT'};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('auth.v1.AuthService', 'Authorize') -> {<<"auth.v1.AuthService">>, <<"Authorize">>};
service_and_rpc_name_to_fqbins('auth.v1.AuthService', 'AuthorizePAT') -> {<<"auth.v1.AuthService">>, <<"AuthorizePAT">>};
service_and_rpc_name_to_fqbins('auth.v1.AuthService', 'Authenticate') -> {<<"auth.v1.AuthService">>, <<"Authenticate">>};
service_and_rpc_name_to_fqbins('auth.v1.AuthService', 'AuthenticatePAT') -> {<<"auth.v1.AuthService">>, <<"AuthenticatePAT">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"auth.v1.AuthNReq">>) -> auth_n_req;
fqbin_to_msg_name(<<"auth.v1.AuthNRes">>) -> auth_n_res;
fqbin_to_msg_name(<<"auth.v1.AuthZReq">>) -> auth_z_req;
fqbin_to_msg_name(<<"auth.v1.AuthZPatReq">>) -> auth_z_pat_req;
fqbin_to_msg_name(<<"auth.v1.AuthZRes">>) -> auth_z_res;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(auth_n_req) -> <<"auth.v1.AuthNReq">>;
msg_name_to_fqbin(auth_n_res) -> <<"auth.v1.AuthNRes">>;
msg_name_to_fqbin(auth_z_req) -> <<"auth.v1.AuthZReq">>;
msg_name_to_fqbin(auth_z_pat_req) -> <<"auth.v1.AuthZPatReq">>;
msg_name_to_fqbin(auth_z_res) -> <<"auth.v1.AuthZRes">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'auth.v1'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "auth.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["auth.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["auth"].


get_msg_containment("auth") -> [auth_n_req, auth_n_res, auth_z_pat_req, auth_z_req, auth_z_res];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("auth") -> 'auth.v1';
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("auth") -> ['auth.v1.AuthService'];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("auth") -> [{'auth.v1.AuthService', 'Authorize'}, {'auth.v1.AuthService', 'AuthorizePAT'}, {'auth.v1.AuthService', 'Authenticate'}, {'auth.v1.AuthService', 'AuthenticatePAT'}];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("auth") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"auth.v1.AuthZReq">>) -> "auth";
get_proto_by_msg_name_as_fqbin(<<"auth.v1.AuthZPatReq">>) -> "auth";
get_proto_by_msg_name_as_fqbin(<<"auth.v1.AuthNReq">>) -> "auth";
get_proto_by_msg_name_as_fqbin(<<"auth.v1.AuthZRes">>) -> "auth";
get_proto_by_msg_name_as_fqbin(<<"auth.v1.AuthNRes">>) -> "auth";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"auth.v1.AuthService">>) -> "auth";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"auth.v1">>) -> ["auth"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.21.1".

gpb_version_as_list() ->
    [4,21,1].

gpb_version_source() ->
    "file".
